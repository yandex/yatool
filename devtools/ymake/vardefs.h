#pragma once

#include <util/generic/strbuf.h>
#include <util/generic/array_ref.h>

namespace NVariableDefs {

struct TVariableDefiniton {
    TStringBuf Name;
    TStringBuf Description;
    TSourceLocation Link;

    constexpr operator TStringBuf() const noexcept {
        return Name;
    }
};

#define VARIABLE(name, description) constexpr TVariableDefiniton VAR_##name{#name, description, __LOCATION__};

VARIABLE(_IGNORE_DUPSRC, "")
VARIABLE(_MODULE_SCOPE_ONLY_VARS, "list of variables that are allowed in module scope only")
VARIABLE(ALL_SRCS, "")
VARIABLE(APPLIED_EXCLUDES, "")
VARIABLE(ARCADIA_BUILD_ROOT, "build output root directory")
VARIABLE(ARCADIA_ROOT, "source files root directory")
VARIABLE(AUTO_INPUT, "")
VARIABLE(BINDIR, "module directory within a build tree, ARCADIA_BUILD_ROOT / MODDIR")
VARIABLE(CHECK_INTERNAL, "")
VARIABLE(CMAKE_CURRENT_BINARY_DIR, "")
VARIABLE(CMAKE_CURRENT_SOURCE_DIR, "")
VARIABLE(CONSUME_NON_MANAGEABLE_PEERS, "")
VARIABLE(CURDIR, "module directory within a source tree, ARCADIA_ROOT / MODDIR")
VARIABLE(DART_CLASSPATH_DEPS, "")
VARIABLE(DART_CLASSPATH, "")
VARIABLE(DEFAULT_MODULE_LICENSE, "Default license for modules that do not set the LICENSE explicitly")
VARIABLE(DEPENDENCY_MANAGEMENT_VALUE, "")
VARIABLE(DONT_RESOLVE_INCLUDES, "")
VARIABLE(DYNAMIC_LINK, "")
VARIABLE(EV_HEADER_EXTS, "")
VARIABLE(EXCLUDE_SUBMODULES, "")
VARIABLE(EXCLUDE_VALUE, "")
VARIABLE(EXPORTED_BUILD_SYSTEM_BUILD_ROOT, "")
VARIABLE(EXPORTED_BUILD_SYSTEM_SOURCE_ROOT, "")
VARIABLE(GLOBAL_SUFFIX, "")
VARIABLE(GLOBAL_TARGET, "")
VARIABLE(GO_HAS_INTERNAL_TESTS, "")
VARIABLE(GO_TEST_FOR_DIR, "")
VARIABLE(HAS_MANAGEABLE_PEERS, "")
VARIABLE(IGNORE_JAVA_DEPENDENCIES_CONFIGURATION, "")
VARIABLE(INPUT, "")
VARIABLE(INTERNAL_EXCEPTIONS, "")
VARIABLE(JAVA_DEPENDENCIES_CONFIGURATION_VALUE, "")
VARIABLE(MANAGED_PEERS_CLOSURE, "")
VARIABLE(MANAGED_PEERS, "")
VARIABLE(MANGLED_MODULE_TYPE, "")
VARIABLE(MODDIR, "module directory w/o specifying a root")
VARIABLE(MODULE_ARGS, "")
VARIABLE(MODULE_COMMON_CONFIGS_DIR, "")
VARIABLE(MODULE_KIND, "")
VARIABLE(MODULE_LANG, "")
VARIABLE(MODULE_PREFIX, "")
VARIABLE(MODULE_SUFFIX, "")
VARIABLE(MODULE_TAG, "Defines TAG of the module. Module tags compatibility is checked when processing PEERDIR "
    "macro in order to forbind bad deps (like dependency between C++ library and Java library) or to choose "
    "proper submodule in multimodule")
VARIABLE(MODULE_TYPE, "")
VARIABLE(MODULE_SEM_IGNORE, "Skip traverse into module during render sem-graph, add IGNORED to semantics")
VARIABLE(MODULES_WITH_EXTENDED_GLOB_RESTRICTIONS, "Few modules with many files to extend glob restrictions")
VARIABLE(NON_NAMAGEABLE_PEERS, "")
VARIABLE(OUTPUT, "")
VARIABLE(PASS_PEERS, "@usage: PASS_PEERS=yes/no\n\n"
""
"If set, module peers are passed to it's dependendants.")
VARIABLE(PEERDIR_TAGS, "")
VARIABLE(PEERS_LATE_OUTS, "")
VARIABLE(PEERS, "a list of module dependencies for the module")
VARIABLE(PROTO_HEADER_EXTS, "")
VARIABLE(PYTHON_BIN, "")
VARIABLE(REALPRJNAME, "")
VARIABLE(SONAME, "")
VARIABLE(SRC, "")
VARIABLE(SRCS_GLOBAL, "")
VARIABLE(START_TARGET, "")
VARIABLE(TARGET, "")
VARIABLE(TEST_CASE_ROOT, "")
VARIABLE(TEST_OUT_ROOT, "")
VARIABLE(TEST_SOURCE_ROOT, "")
VARIABLE(TEST_WORK_ROOT, "")
VARIABLE(TOOLS, "")
VARIABLE(TS_CONFIG_DECLARATION_MAP, "")
VARIABLE(TS_CONFIG_DECLARATION, "")
VARIABLE(TS_CONFIG_DEDUCE_OUT, "")
VARIABLE(TS_CONFIG_OUT_DIR, "")
VARIABLE(TS_CONFIG_PRESERVE_JSX, "")
VARIABLE(TS_CONFIG_ROOT_DIR, "")
VARIABLE(TS_CONFIG_SOURCE_MAP, "")
VARIABLE(UNITTEST_DIR, "")
VARIABLE(UNITTEST_MOD, "")
VARIABLE(USE_ALL_SRCS, "")
VARIABLE(USE_GLOBAL_CMD, "")
VARIABLE(YMAKE_BIN, "")

#undef VARIABLE

constexpr TVariableDefiniton ALL_VARIABLES[]{
    VAR__IGNORE_DUPSRC,
    VAR__MODULE_SCOPE_ONLY_VARS,
    VAR_ALL_SRCS,
    VAR_APPLIED_EXCLUDES,
    VAR_ARCADIA_BUILD_ROOT,
    VAR_ARCADIA_ROOT,
    VAR_AUTO_INPUT,
    VAR_BINDIR,
    VAR_CHECK_INTERNAL,
    VAR_CMAKE_CURRENT_BINARY_DIR,
    VAR_CMAKE_CURRENT_SOURCE_DIR,
    VAR_CONSUME_NON_MANAGEABLE_PEERS,
    VAR_CURDIR,
    VAR_DART_CLASSPATH_DEPS,
    VAR_DART_CLASSPATH,
    VAR_DEFAULT_MODULE_LICENSE,
    VAR_DEPENDENCY_MANAGEMENT_VALUE,
    VAR_DONT_RESOLVE_INCLUDES,
    VAR_DYNAMIC_LINK,
    VAR_EV_HEADER_EXTS,
    VAR_EXCLUDE_SUBMODULES,
    VAR_EXCLUDE_VALUE,
    VAR_EXPORTED_BUILD_SYSTEM_BUILD_ROOT,
    VAR_EXPORTED_BUILD_SYSTEM_SOURCE_ROOT,
    VAR_GLOBAL_SUFFIX,
    VAR_GLOBAL_TARGET,
    VAR_GO_HAS_INTERNAL_TESTS,
    VAR_GO_TEST_FOR_DIR,
    VAR_HAS_MANAGEABLE_PEERS,
    VAR_IGNORE_JAVA_DEPENDENCIES_CONFIGURATION,
    VAR_INPUT,
    VAR_INTERNAL_EXCEPTIONS,
    VAR_JAVA_DEPENDENCIES_CONFIGURATION_VALUE,
    VAR_MANAGED_PEERS_CLOSURE,
    VAR_MANAGED_PEERS,
    VAR_MANGLED_MODULE_TYPE,
    VAR_MODDIR,
    VAR_MODULE_ARGS,
    VAR_MODULE_COMMON_CONFIGS_DIR,
    VAR_MODULE_KIND,
    VAR_MODULE_LANG,
    VAR_MODULE_PREFIX,
    VAR_MODULE_SUFFIX,
    VAR_MODULE_TYPE,
    VAR_MODULE_SEM_IGNORE,
    VAR_NON_NAMAGEABLE_PEERS,
    VAR_OUTPUT,
    VAR_PASS_PEERS,
    VAR_PEERDIR_TAGS,
    VAR_PEERS_LATE_OUTS,
    VAR_PEERS,
    VAR_PROTO_HEADER_EXTS,
    VAR_PYTHON_BIN,
    VAR_REALPRJNAME,
    VAR_SONAME,
    VAR_SRC,
    VAR_SRCS_GLOBAL,
    VAR_START_TARGET,
    VAR_TARGET,
    VAR_TEST_CASE_ROOT,
    VAR_TEST_OUT_ROOT,
    VAR_TEST_SOURCE_ROOT,
    VAR_TEST_WORK_ROOT,
    VAR_TOOLS,
    VAR_TS_CONFIG_DECLARATION_MAP,
    VAR_TS_CONFIG_DECLARATION,
    VAR_TS_CONFIG_DEDUCE_OUT,
    VAR_TS_CONFIG_OUT_DIR,
    VAR_TS_CONFIG_PRESERVE_JSX,
    VAR_TS_CONFIG_ROOT_DIR,
    VAR_TS_CONFIG_SOURCE_MAP,
    VAR_UNITTEST_DIR,
    VAR_UNITTEST_MOD,
    VAR_USE_ALL_SRCS,
    VAR_USE_GLOBAL_CMD,
    VAR_YMAKE_BIN,
};
}  // namespace NVariableDefs
