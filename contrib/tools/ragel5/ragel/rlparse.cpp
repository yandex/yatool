/* Automatically generated by Kelbt from "rlparse.kl".
 *
 * Parts of this file are copied from Kelbt source covered by the GNU
 * GPL. As a special exception, you may use the parts of this file copied
 * from Kelbt source without restriction. The remainder is derived from
 * "rlparse.kl" and inherits the copyright status of that file.
 */

#line 1 "rlparse.kl"
/*
 *  Copyright 2001-2007 Adrian Thurston <thurston@cs.queensu.ca>
 */

/*  This file is part of Ragel.
 *
 *  Ragel is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 * 
 *  Ragel is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with Ragel; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA 
 */

#include "rlparse.h"
#include "ragel.h"
#include <iostream>
#include <errno.h>

#include <stdlib.h>
//#include <malloc.h>

using std::cout;
using std::cerr;
using std::endl;

ParserDict parserDict;

#line 93 "rlparse.kh"
#line 96 "rlparse.kh"
#line 126 "rlparse.kh"
#line 1370 "rlparse.kl"


#line 50 "rlparse.cpp"
struct Parser_Lel_action_ref
{
#line 682 "rlparse.kl"

	Action *action;


#line 57 "rlparse.cpp"
};

struct Parser_Lel_aug_type
{
#line 475 "rlparse.kl"

	InputLoc loc;
	AugType augType;


#line 68 "rlparse.cpp"
};

struct Parser_Lel_expression
{
#line 297 "rlparse.kl"

	Expression *expression;


#line 78 "rlparse.cpp"
};

struct Parser_Lel_factor
{
#line 907 "rlparse.kl"

	Factor *factor;


#line 88 "rlparse.cpp"
};

struct Parser_Lel_factor_rep_num
{
#line 861 "rlparse.kl"

	int rep;


#line 98 "rlparse.cpp"
};

struct Parser_Lel_factor_with_aug
{
#line 392 "rlparse.kl"

	FactorWithAug *factorWithAug;


#line 108 "rlparse.cpp"
};

struct Parser_Lel_factor_with_ep
{
#line 376 "rlparse.kl"

	FactorWithAug *factorWithAug;


#line 118 "rlparse.cpp"
};

struct Parser_Lel_factor_with_label
{
#line 360 "rlparse.kl"

	FactorWithAug *factorWithAug;


#line 128 "rlparse.cpp"
};

struct Parser_Lel_factor_with_neg
{
#line 887 "rlparse.kl"

	FactorWithNeg *factorWithNeg;


#line 138 "rlparse.cpp"
};

struct Parser_Lel_factor_with_rep
{
#line 811 "rlparse.kl"

	FactorWithRep *factorWithRep;


#line 148 "rlparse.cpp"
};

struct Parser_Lel_inline_item
{
#line 1160 "rlparse.kl"

	InlineItem *inlineItem;


#line 158 "rlparse.cpp"
};

struct Parser_Lel_inline_list
{
#line 1139 "rlparse.kl"

	InlineList *inlineList;


#line 168 "rlparse.cpp"
};

struct Parser_Lel_join
{
#line 281 "rlparse.kl"

	Join *join;


#line 178 "rlparse.cpp"
};

struct Parser_Lel_join_or_lm
{
#line 204 "rlparse.kl"

	JoinOrLm *joinOrLm;


#line 188 "rlparse.cpp"
};

struct Parser_Lel_lm_part_list
{
#line 224 "rlparse.kl"

	LmPartList *lmPartList;


#line 198 "rlparse.cpp"
};

struct Parser_Lel_local_err_name
{
#line 790 "rlparse.kl"

	int error_name;


#line 208 "rlparse.cpp"
};

struct Parser_Lel_longest_match_part
{
#line 243 "rlparse.kl"

	LongestMatchPart *lmPart;


#line 218 "rlparse.cpp"
};

struct Parser_Lel_opt_export
{
#line 64 "rlparse.kl"

	bool isSet;


#line 228 "rlparse.cpp"
};

struct Parser_Lel_opt_lm_part_action
{
#line 262 "rlparse.kl"

	Action *action;


#line 238 "rlparse.cpp"
};

struct Parser_Lel_priority_aug
{
#line 741 "rlparse.kl"

	int priorityNum;


#line 248 "rlparse.cpp"
};

struct Parser_Lel_priority_name
{
#line 723 "rlparse.kl"

	int priorityName;


#line 258 "rlparse.cpp"
};

struct Parser_Lel_range_lit
{
#line 975 "rlparse.kl"

	Literal *literal;


#line 268 "rlparse.cpp"
};

struct Parser_Lel_regular_expr
{
#line 1013 "rlparse.kl"

	RegExpr *regExpr;


#line 278 "rlparse.cpp"
};

struct Parser_Lel_regular_expr_char
{
#line 1062 "rlparse.kl"

	ReItem *reItem;


#line 288 "rlparse.cpp"
};

struct Parser_Lel_regular_expr_item
{
#line 1046 "rlparse.kl"

	ReItem *reItem;


#line 298 "rlparse.cpp"
};

struct Parser_Lel_regular_expr_or_char
{
#line 1121 "rlparse.kl"

	ReOrItem *reOrItem;


#line 308 "rlparse.cpp"
};

struct Parser_Lel_regular_expr_or_data
{
#line 1088 "rlparse.kl"

	ReOrBlock *reOrBlock;


#line 318 "rlparse.cpp"
};

struct Parser_Lel_term
{
#line 329 "rlparse.kl"

	Term *term;


#line 328 "rlparse.cpp"
};

struct Parser_Lel_token_type
{
#line 104 "rlparse.kl"

	Token token;


#line 338 "rlparse.cpp"
};

union Parser_UserData
{
	struct Parser_Lel_action_ref action_ref;
	struct Parser_Lel_aug_type aug_type;
	struct Parser_Lel_expression expression;
	struct Parser_Lel_factor factor;
	struct Parser_Lel_factor_rep_num factor_rep_num;
	struct Parser_Lel_factor_with_aug factor_with_aug;
	struct Parser_Lel_factor_with_ep factor_with_ep;
	struct Parser_Lel_factor_with_label factor_with_label;
	struct Parser_Lel_factor_with_neg factor_with_neg;
	struct Parser_Lel_factor_with_rep factor_with_rep;
	struct Parser_Lel_inline_item inline_item;
	struct Parser_Lel_inline_list inline_list;
	struct Parser_Lel_join join;
	struct Parser_Lel_join_or_lm join_or_lm;
	struct Parser_Lel_lm_part_list lm_part_list;
	struct Parser_Lel_local_err_name local_err_name;
	struct Parser_Lel_longest_match_part longest_match_part;
	struct Parser_Lel_opt_export opt_export;
	struct Parser_Lel_opt_lm_part_action opt_lm_part_action;
	struct Parser_Lel_priority_aug priority_aug;
	struct Parser_Lel_priority_name priority_name;
	struct Parser_Lel_range_lit range_lit;
	struct Parser_Lel_regular_expr regular_expr;
	struct Parser_Lel_regular_expr_char regular_expr_char;
	struct Parser_Lel_regular_expr_item regular_expr_item;
	struct Parser_Lel_regular_expr_or_char regular_expr_or_char;
	struct Parser_Lel_regular_expr_or_data regular_expr_or_data;
	struct Parser_Lel_term term;
	struct Parser_Lel_token_type token_type;
	struct Token token;
};

struct Parser_LangEl
{
	char *file;
	int line;
	int type;
	int reduction;
	int state;
	union Parser_UserData user;
	unsigned int retry;
	struct Parser_LangEl *next, *child;
};

#line 388 "rlparse.cpp"
unsigned int Parser_startState = 0;

short Parser_indicies[] = {
	151, -1, -1, -1, -1, -1, 151, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 151, 151, 151, 151, -1, -1, 
	-1, -1, -1, -1, 151, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 151, 151, -1, 151, 1, 0, 393, 
	153, -1, -1, -1, -1, -1, 153, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 153, 153, 153, 153, -1, -1, 
	-1, -1, -1, -1, 153, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 153, 153, -1, 149, -1, -1, 2, 
	157, -1, -1, -1, -1, -1, 150, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 4, 5, 6, 7, -1, -1, 
	-1, -1, -1, -1, 154, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 9, 8, -1, -1, -1, -1, -1, 
	152, 384, 385, 386, 387, 388, 389, 390, 
	391, 392, 10, 3, 161, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	24, 11, 12, 14, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 318, 320, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 13, 356, 356, 356, -1, 356, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 356, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 356, 
	-1, -1, -1, -1, -1, -1, 356, 356, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	356, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 356, 356, 356, 
	356, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 356, 
	356, -1, -1, -1, 356, 356, 356, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	20, 356, 356, 356, -1, 356, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 356, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 356, -1, -1, 
	-1, -1, -1, -1, 356, 356, -1, -1, 
	-1, -1, -1, -1, -1, -1, 356, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 356, 356, 356, 356, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 356, 356, -1, 
	-1, -1, 356, 356, 356, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 22, 170, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 170, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 21, 23, -1, -1, -1, -1, -1, 
	-1, -1, -1, 155, 25, 164, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 26, 14, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 318, 320, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 27, 319, 
	368, 369, 370, -1, 367, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 166, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 366, -1, -1, -1, 
	-1, -1, -1, 364, 365, -1, -1, -1, 
	-1, -1, -1, -1, -1, 371, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 360, 361, 362, 363, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 372, 373, -1, -1, 
	-1, 374, 375, 28, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 357, -1, 359, -1, 355, 358, 
	29, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 169, 368, 
	369, 370, -1, 367, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 167, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 366, -1, -1, -1, -1, 
	-1, -1, 364, 365, -1, -1, -1, -1, 
	-1, -1, -1, -1, 371, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 360, 361, 362, 363, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 372, 373, -1, -1, -1, 
	374, 375, 28, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 357, -1, 359, -1, 355, 358, 153, 
	-1, -1, -1, -1, -1, -1, 153, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	153, 153, 153, 153, -1, -1, -1, -1, 
	-1, -1, 153, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 153, 
	153, -1, -1, -1, -1, 30, 31, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 32, 334, 334, 334, -1, 334, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 334, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	334, -1, -1, -1, -1, -1, -1, 334, 
	-1, -1, -1, -1, -1, -1, 334, 334, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	334, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 334, 334, 334, 
	334, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 33, 163, 
	165, 34, 356, 356, 356, -1, 356, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 356, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 356, -1, 
	-1, -1, -1, -1, -1, 356, 356, -1, 
	-1, -1, -1, -1, -1, -1, -1, 356, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 356, 356, 356, 356, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 356, 356, 
	-1, -1, -1, 356, 356, 356, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 35, 
	158, -1, -1, -1, -1, -1, -1, 157, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 4, 5, 6, 7, -1, -1, -1, 
	-1, -1, -1, 154, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	9, 8, -1, -1, -1, -1, -1, 152, 
	384, 385, 386, 387, 388, 389, 390, 391, 
	392, 10, 3, 44, -1, -1, -1, -1, 
	-1, -1, 52, -1, -1, -1, -1, 14, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	45, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 39, 46, 
	-1, -1, -1, -1, -1, 318, 320, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 50, 48, 49, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 36, -1, -1, 47, -1, 
	-1, -1, -1, -1, -1, -1, 37, 38, 
	193, 41, -1, 42, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 43, -1, 
	-1, -1, 300, 304, -1, -1, 51, 44, 
	-1, -1, -1, -1, -1, -1, 52, -1, 
	-1, -1, -1, 14, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 45, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 39, 46, -1, -1, -1, -1, 
	-1, 318, 320, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 55, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	50, 48, 49, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 54, 
	53, -1, 47, -1, -1, -1, -1, -1, 
	-1, -1, 37, 38, 193, 41, -1, 42, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 43, -1, -1, -1, 300, 304, 
	-1, -1, 51, 340, 341, 342, -1, 338, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 339, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	162, -1, -1, -1, -1, -1, -1, 366, 
	-1, -1, -1, -1, -1, -1, 364, 365, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	343, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 360, 361, 362, 
	363, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 62, 57, 56, 372, 
	373, 58, 60, 61, 374, 375, 28, 59, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 333, 337, 335, 336, 344, 
	381, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 380, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 63, -1, -1, -1, -1, 64, 368, 
	369, 370, -1, 367, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 168, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 366, -1, -1, -1, -1, 
	-1, -1, 364, 365, -1, -1, -1, -1, 
	-1, -1, -1, -1, 371, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 360, 361, 362, 363, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 372, 373, -1, -1, -1, 
	374, 375, 28, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 357, -1, 359, -1, 355, 358, 70, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 159, 72, 
	-1, -1, 182, -1, -1, 182, 73, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 182, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 182, 71, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 182, -1, -1, -1, 
	74, 44, -1, -1, -1, -1, 187, -1, 
	52, 187, -1, -1, 187, 19, 75, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 187, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 45, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 187, 187, -1, -1, -1, 
	-1, -1, -1, -1, 39, 46, -1, -1, 
	-1, -1, -1, 318, 320, -1, -1, 76, 
	77, 78, -1, 187, -1, -1, -1, 187, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 50, 48, 49, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 47, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 188, 41, 
	-1, 42, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 43, -1, -1, -1, 
	300, 304, -1, -1, 51, 307, -1, -1, 
	307, 307, 307, -1, 307, 307, 307, 307, 
	307, 307, 307, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 66, 307, 
	307, -1, 307, 307, 307, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 307, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 307, 
	307, -1, -1, -1, -1, -1, -1, -1, 
	307, 307, -1, -1, -1, -1, -1, 307, 
	307, -1, -1, 307, 307, 307, 307, 307, 
	307, -1, -1, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 307, 195, 
	-1, -1, -1, -1, 195, -1, 195, 195, 
	-1, -1, 195, 195, 195, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 195, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 195, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 195, 195, -1, -1, -1, -1, -1, 
	-1, -1, 195, 195, -1, -1, -1, -1, 
	-1, 195, 195, -1, -1, 195, 195, 195, 
	79, 195, -1, -1, -1, 195, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	195, 195, 195, 197, -1, -1, 89, 88, 
	197, -1, 197, 197, -1, -1, 197, 197, 
	197, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 197, 91, -1, 
	90, -1, 87, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	197, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 197, 197, -1, 
	-1, -1, -1, -1, -1, -1, 197, 197, 
	-1, -1, -1, -1, -1, 197, 197, -1, 
	-1, 197, 197, 197, 197, 197, -1, -1, 
	-1, 197, 213, 215, 217, 92, 256, 260, 
	262, 264, 258, 266, 268, 272, 274, 276, 
	270, 278, 244, 248, 250, 252, 246, 254, 
	220, 224, 226, 228, 222, 230, 232, 236, 
	238, 240, 234, 242, 197, 197, 197, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 219, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 80, -1, -1, 81, 
	82, 83, 84, 85, 86, 208, -1, -1, 
	208, 208, 208, -1, 208, 208, 292, 295, 
	208, 208, 208, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 208, 
	208, -1, 208, 294, 208, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 208, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 93, 
	208, -1, -1, -1, -1, -1, -1, -1, 
	208, 208, -1, -1, -1, -1, -1, 208, 
	208, -1, -1, 208, 208, 208, 208, 208, 
	293, -1, -1, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 208, 44, 
	-1, -1, -1, -1, -1, -1, 52, -1, 
	-1, -1, -1, 14, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 45, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 308, 46, -1, -1, -1, -1, 
	-1, 318, 320, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	50, 48, 49, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 47, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 302, 304, 
	-1, -1, 51, 44, -1, -1, -1, -1, 
	-1, -1, 52, -1, -1, -1, -1, 14, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	45, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 308, 46, 
	-1, -1, -1, -1, -1, 318, 320, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 50, 48, 49, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 47, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 303, 304, -1, -1, 51, 305, 
	-1, -1, 305, 305, 305, -1, 305, 305, 
	305, 305, 305, 305, 305, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 305, 305, -1, 305, 305, 305, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 305, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 305, 305, -1, -1, -1, -1, -1, 
	-1, -1, 305, 305, -1, -1, -1, -1, 
	-1, 305, 305, -1, 314, 305, 305, 305, 
	305, 305, 305, -1, -1, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	305, 306, -1, -1, 306, 306, 306, -1, 
	306, 306, 306, 306, 306, 306, 306, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 306, 306, -1, 306, 306, 
	306, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 306, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 306, 306, -1, -1, -1, 
	-1, -1, -1, -1, 306, 306, -1, -1, 
	-1, -1, -1, 306, 306, -1, 316, 306, 
	306, 306, 306, 306, 306, -1, -1, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 306, 330, -1, -1, -1, 330, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	68, 330, -1, -1, -1, 330, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 69, 322, 
	322, 322, -1, 322, -1, -1, 322, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	67, 94, 44, -1, -1, -1, -1, -1, 
	-1, 52, -1, -1, -1, -1, 14, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 45, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 39, 46, -1, 
	-1, -1, -1, -1, 318, 320, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 50, 48, 49, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 65, -1, -1, 47, -1, -1, 
	-1, -1, -1, -1, -1, 37, 38, 193, 
	41, -1, 42, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 43, -1, -1, 
	-1, 300, 304, -1, -1, 51, 160, 70, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 171, 44, 
	-1, -1, -1, -1, -1, -1, 52, -1, 
	-1, -1, -1, 14, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 45, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 40, 46, -1, -1, -1, -1, 
	-1, 318, 320, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	50, 48, 49, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 4, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 154, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 176, -1, 175, -1, -1, 
	-1, -1, -1, -1, 156, 97, -1, 96, 
	-1, -1, 47, -1, -1, 95, 174, -1, 
	-1, -1, 37, 38, 193, 41, -1, 42, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 43, -1, -1, -1, 300, 304, 
	-1, -1, 51, 345, 356, 356, 356, -1, 
	356, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 356, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	356, -1, -1, -1, -1, -1, -1, 356, 
	356, -1, -1, -1, -1, -1, -1, -1, 
	-1, 356, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 356, 356, 
	356, 356, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	356, 356, -1, -1, -1, 356, 356, 356, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 98, 100, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 381, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 380, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 99, -1, -1, 
	-1, -1, 64, 104, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 381, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 380, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 103, -1, 
	-1, -1, -1, 64, 102, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 381, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 380, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 101, 
	-1, -1, -1, -1, 64, 353, 354, 376, 
	383, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 105, 313, -1, 
	-1, 70, 44, -1, -1, -1, -1, -1, 
	-1, 52, -1, -1, -1, -1, 14, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 45, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 39, 46, -1, 
	-1, -1, -1, -1, 318, 320, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 50, 48, 49, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 47, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 194, 
	41, -1, 42, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 43, -1, -1, 
	-1, 300, 304, -1, -1, 51, 311, 107, 
	108, -1, 327, -1, -1, 328, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 321, 106, 309, -1, -1, -1, 109, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 329, 310, -1, 
	-1, -1, 109, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	329, 44, -1, -1, -1, -1, -1, -1, 
	52, -1, -1, -1, -1, 14, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 45, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 39, 46, -1, -1, 
	-1, -1, -1, 318, 320, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 50, 48, 49, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 47, -1, -1, -1, 
	-1, -1, -1, -1, 110, 38, 193, 41, 
	-1, 42, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 43, -1, -1, -1, 
	300, 304, -1, -1, 51, 44, -1, -1, 
	-1, -1, -1, -1, 52, -1, -1, -1, 
	-1, 14, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 45, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	39, 46, -1, -1, -1, -1, -1, 318, 
	320, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 50, 48, 
	49, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	47, -1, -1, -1, -1, -1, -1, -1, 
	-1, 113, 193, 41, -1, 42, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	43, -1, -1, -1, 300, 304, -1, -1, 
	51, 44, -1, -1, -1, -1, -1, -1, 
	52, -1, -1, -1, -1, 14, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 45, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 39, 46, -1, -1, 
	-1, -1, -1, 318, 320, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 50, 48, 49, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 47, -1, -1, -1, 
	-1, -1, -1, -1, -1, 111, 193, 41, 
	-1, 42, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 43, -1, -1, -1, 
	300, 304, -1, -1, 51, 44, -1, -1, 
	-1, -1, -1, -1, 52, -1, -1, -1, 
	-1, 14, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 45, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	39, 46, -1, -1, -1, -1, -1, 318, 
	320, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 50, 48, 
	49, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	47, -1, -1, -1, -1, -1, -1, -1, 
	-1, 112, 193, 41, -1, 42, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	43, -1, -1, -1, 300, 304, -1, -1, 
	51, 44, -1, -1, -1, -1, -1, -1, 
	52, -1, -1, -1, -1, 14, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 45, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 39, 46, -1, -1, 
	-1, -1, -1, 318, 320, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 50, 48, 49, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 47, -1, -1, -1, 
	-1, -1, -1, -1, -1, 114, 193, 41, 
	-1, 42, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 43, -1, -1, -1, 
	300, 304, -1, -1, 51, 44, -1, -1, 
	-1, -1, -1, -1, 52, -1, -1, -1, 
	-1, 14, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 45, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	39, 46, -1, -1, -1, -1, -1, 318, 
	320, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 50, 48, 
	49, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	47, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 189, 41, -1, 42, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	43, -1, -1, -1, 300, 304, -1, -1, 
	51, 44, -1, -1, -1, -1, -1, -1, 
	52, -1, -1, -1, -1, 14, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 45, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 39, 46, -1, -1, 
	-1, -1, -1, 318, 320, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 50, 48, 49, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 47, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 190, 41, 
	-1, 42, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 43, -1, -1, -1, 
	300, 304, -1, -1, 51, 44, -1, -1, 
	-1, -1, -1, -1, 52, -1, -1, -1, 
	-1, 14, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 45, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	39, 46, -1, -1, -1, -1, -1, 318, 
	320, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 50, 48, 
	49, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	47, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 191, 41, -1, 42, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	43, -1, -1, -1, 300, 304, -1, -1, 
	51, 44, -1, -1, -1, -1, -1, -1, 
	52, -1, -1, -1, -1, 14, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 45, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 39, 46, -1, -1, 
	-1, -1, -1, 318, 320, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 50, 48, 49, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 47, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 192, 41, 
	-1, 42, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 43, -1, -1, -1, 
	300, 304, -1, -1, 51, 378, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 196, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 115, 116, -1, -1, 118, -1, 119, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 117, -1, -1, 
	-1, -1, -1, -1, -1, -1, 284, -1, 
	-1, -1, -1, -1, -1, 288, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 198, 282, -1, -1, 
	-1, -1, -1, -1, -1, 199, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 280, 
	287, 120, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 117, -1, -1, -1, 
	-1, -1, -1, -1, -1, 284, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 201, 282, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 280, 120, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 117, -1, -1, -1, -1, -1, 
	-1, -1, -1, 284, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 202, 282, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 280, 120, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	117, -1, -1, -1, -1, -1, -1, -1, 
	-1, 284, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 203, 
	282, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 280, 120, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 117, -1, 
	-1, -1, -1, -1, -1, -1, -1, 284, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 204, 282, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	280, 120, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 117, -1, -1, -1, 
	-1, -1, -1, -1, -1, 284, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 205, 282, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 280, 121, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 117, -1, -1, -1, -1, -1, 
	-1, -1, -1, 284, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 206, 282, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 280, 209, -1, -1, 
	209, -1, 209, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	209, -1, -1, -1, -1, -1, -1, -1, 
	-1, 209, -1, -1, -1, -1, -1, -1, 
	209, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	253, 265, 277, 229, 241, 210, -1, -1, 
	210, -1, 210, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	210, -1, -1, -1, -1, -1, -1, -1, 
	-1, 210, -1, -1, -1, -1, -1, -1, 
	210, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 218, 
	251, 263, 275, 227, 239, 211, -1, -1, 
	211, -1, 211, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	211, -1, -1, -1, -1, -1, -1, -1, 
	-1, 211, -1, -1, -1, -1, -1, -1, 
	211, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 216, 
	249, 261, 273, 225, 237, 212, -1, -1, 
	212, -1, 212, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	212, -1, -1, -1, -1, -1, -1, -1, 
	-1, 212, -1, -1, -1, -1, -1, -1, 
	212, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 214, 
	245, 257, 269, 221, 233, 247, 259, 271, 
	223, 235, 255, 267, 279, 231, 243, 123, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 301, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 122, 14, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 315, -1, -1, -1, -1, 
	-1, 318, 320, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 317, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 312, 44, -1, -1, -1, -1, 
	-1, -1, 52, -1, 127, -1, -1, 14, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	45, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 40, 46, 
	-1, -1, -1, -1, -1, 318, 320, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 50, 48, 49, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	4, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 154, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 176, 
	-1, 175, -1, -1, -1, -1, -1, -1, 
	156, 97, -1, 96, -1, -1, 47, -1, 
	-1, -1, 173, -1, -1, -1, 37, 38, 
	193, 41, -1, 42, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 43, -1, 
	-1, -1, 300, 304, -1, -1, 51, 70, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 180, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 117, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 126, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 125, -1, 179, 161, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 124, 368, 369, 370, -1, 
	367, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 346, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	366, -1, -1, -1, -1, -1, -1, 364, 
	365, -1, -1, -1, -1, -1, -1, -1, 
	-1, 371, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 360, 361, 
	362, 363, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	372, 373, -1, -1, -1, 374, 375, 28, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 357, -1, 
	359, -1, 355, 358, 347, 356, 356, 356, 
	-1, 356, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	356, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 356, -1, -1, -1, -1, -1, -1, 
	356, 356, -1, -1, -1, -1, -1, -1, 
	-1, -1, 356, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 356, 
	356, 356, 356, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 356, 356, -1, -1, -1, 356, 356, 
	356, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 128, 351, 356, 356, 356, -1, 
	356, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 356, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	356, -1, -1, -1, -1, -1, -1, 356, 
	356, -1, -1, -1, -1, -1, -1, -1, 
	-1, 356, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 356, 356, 
	356, 356, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	356, 356, -1, -1, -1, 356, 356, 356, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 129, 349, 356, 356, 356, -1, 356, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 356, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 356, 
	-1, -1, -1, -1, -1, -1, 356, 356, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	356, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 356, 356, 356, 
	356, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 356, 
	356, -1, -1, -1, 356, 356, 356, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	130, 379, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 379, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 131, 324, 324, 
	324, -1, 324, 323, -1, 324, 330, -1, 
	-1, -1, 330, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 132, 330, -1, -1, -1, 
	330, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 133, 331, -1, -1, 134, 331, 72, 
	-1, -1, 181, -1, -1, 181, 73, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 181, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 181, 71, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 181, -1, -1, -1, 
	74, 44, -1, -1, -1, -1, 184, -1, 
	52, 184, -1, -1, 184, 16, 75, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 184, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 45, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 184, 184, -1, -1, -1, 
	-1, -1, -1, -1, 39, 46, -1, -1, 
	-1, -1, -1, 318, 320, -1, -1, 76, 
	77, 78, -1, 184, -1, -1, -1, 184, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 50, 48, 49, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 47, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 188, 41, 
	-1, 42, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 43, -1, -1, -1, 
	300, 304, -1, -1, 51, 44, -1, -1, 
	-1, -1, 185, -1, 52, 185, -1, -1, 
	185, 17, 75, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 185, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 45, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 185, 
	185, -1, -1, -1, -1, -1, -1, -1, 
	39, 46, -1, -1, -1, -1, -1, 318, 
	320, -1, -1, 76, 77, 78, -1, 185, 
	-1, -1, -1, 185, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 50, 48, 
	49, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	47, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 188, 41, -1, 42, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	43, -1, -1, -1, 300, 304, -1, -1, 
	51, 44, -1, -1, -1, -1, 183, -1, 
	52, 183, -1, -1, 183, 15, 75, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 183, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 45, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 183, 183, -1, -1, -1, 
	-1, -1, -1, -1, 39, 46, -1, -1, 
	-1, -1, -1, 318, 320, -1, -1, 76, 
	77, 78, -1, 183, -1, -1, -1, 183, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 50, 48, 49, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 47, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 188, 41, 
	-1, 42, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 43, -1, -1, -1, 
	300, 304, -1, -1, 51, 44, -1, -1, 
	-1, -1, 186, -1, 52, 186, -1, -1, 
	186, 18, 75, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 186, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 45, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 186, 
	186, -1, -1, -1, -1, -1, -1, -1, 
	39, 46, -1, -1, -1, -1, -1, 318, 
	320, -1, -1, 76, 77, 78, -1, 186, 
	-1, -1, -1, 186, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 50, 48, 
	49, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	47, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 188, 41, -1, 42, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	43, -1, -1, -1, 300, 304, -1, -1, 
	51, 383, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 135, 138, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 136, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	137, 334, 334, 334, -1, 334, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 334, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 334, -1, 
	-1, -1, -1, -1, -1, 334, -1, -1, 
	-1, -1, -1, -1, 334, 334, -1, -1, 
	-1, -1, -1, -1, -1, -1, 334, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 334, 334, 334, 334, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 139, 289, 290, 284, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	137, 141, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	140, -1, 137, 143, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 296, 301, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 142, 31, 177, 120, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 117, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	284, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 178, 282, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 280, 172, 368, 369, 370, -1, 367, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 348, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 366, 
	-1, -1, -1, -1, -1, -1, 364, 365, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	371, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 360, 361, 362, 
	363, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 372, 
	373, -1, -1, -1, 374, 375, 28, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 357, -1, 359, 
	-1, 355, 358, 368, 369, 370, -1, 367, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 352, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 366, 
	-1, -1, -1, -1, -1, -1, 364, 365, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	371, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 360, 361, 362, 
	363, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 372, 
	373, -1, -1, -1, 374, 375, 28, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 357, -1, 359, 
	-1, 355, 358, 368, 369, 370, -1, 367, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 350, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 366, 
	-1, -1, -1, -1, -1, -1, 364, 365, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	371, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 360, 361, 362, 
	363, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 372, 
	373, -1, -1, -1, 374, 375, 28, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 357, -1, 359, 
	-1, 355, 358, 382, 325, -1, -1, -1, 
	109, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 329, 326, 
	-1, -1, -1, 109, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 329, 332, 377, -1, -1, -1, -1, 
	377, -1, 377, 377, -1, -1, 377, 377, 
	377, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 377, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	377, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 377, 377, -1, 
	-1, -1, -1, -1, -1, -1, 377, 377, 
	-1, -1, -1, -1, -1, 377, 377, -1, 
	-1, 377, 377, 377, 377, 377, -1, 131, 
	-1, 377, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 377, 377, 377, 144, 
	281, 283, -1, -1, 286, 340, 341, 342, 
	-1, 338, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	339, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 285, -1, -1, -1, -1, -1, 
	-1, 366, -1, -1, -1, -1, -1, -1, 
	364, 365, -1, -1, -1, -1, -1, -1, 
	-1, -1, 343, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 360, 
	361, 362, 363, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 62, 57, 
	56, 372, 373, 58, 60, 61, 374, 375, 
	28, 59, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 333, 337, 335, 
	336, 344, 145, 283, -1, -1, 291, 297, 
	298, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 301, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 146, 118, -1, 119, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 288, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 147, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 287, 120, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 117, -1, -1, -1, -1, -1, 
	-1, -1, -1, 284, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 148, 282, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 280, 299, 200, 207, 
	
};

unsigned short Parser_keys[] = {
	132, 226, 224, 224, 132, 227, 132, 239, 
	132, 240, 132, 132, 132, 132, 45, 244, 
	40, 245, 40, 245, 132, 246, 123, 132, 
	123, 123, 59, 132, 45, 244, 139, 139, 
	40, 287, 132, 194, 40, 287, 125, 227, 
	61, 137, 40, 243, 59, 59, 59, 59, 
	40, 40, 40, 245, 125, 239, 33, 276, 
	33, 276, 40, 284, 132, 290, 40, 287, 
	44, 59, 38, 151, 33, 276, 33, 202, 
	33, 188, 33, 266, 33, 202, 33, 276, 
	33, 276, 33, 202, 33, 202, 189, 274, 
	189, 274, 186, 275, 142, 142, 33, 276, 
	59, 59, 44, 59, 33, 276, 59, 59, 
	40, 245, 42, 290, 42, 290, 42, 290, 
	59, 59, 59, 59, 41, 41, 132, 289, 
	41, 44, 33, 276, 186, 278, 189, 279, 
	189, 279, 33, 276, 33, 276, 33, 276, 
	33, 276, 33, 276, 33, 276, 33, 276, 
	33, 276, 33, 276, 132, 288, 40, 270, 
	40, 269, 40, 269, 40, 269, 40, 269, 
	40, 269, 40, 269, 40, 207, 40, 207, 
	40, 207, 40, 207, 203, 207, 203, 207, 
	44, 271, 45, 276, 33, 276, 44, 251, 
	132, 240, 40, 287, 59, 59, 40, 245, 
	59, 59, 40, 245, 59, 59, 40, 245, 
	41, 149, 186, 193, 189, 274, 189, 274, 
	189, 193, 38, 151, 33, 276, 33, 276, 
	33, 276, 33, 276, 132, 289, 132, 269, 
	40, 243, 139, 139, 139, 139, 132, 269, 
	132, 269, 44, 125, 139, 271, 61, 61, 
	59, 59, 40, 269, 124, 124, 40, 287, 
	40, 287, 40, 287, 132, 132, 189, 279, 
	189, 279, 193, 193, 33, 188, 44, 44, 
	41, 41, 41, 44, 40, 284, 44, 44, 
	41, 44, 125, 125, 125, 271, 43, 270, 
	40, 269, 125, 125, 41, 41, 41, 41, 
	0, 0
};

unsigned int Parser_offsets[] = {
	0, 95, 96, 192, 300, 409, 410, 411, 
	611, 817, 1023, 1138, 1148, 1149, 1223, 1423, 
	1424, 1672, 1735, 1983, 2086, 2163, 2367, 2368, 
	2369, 2370, 2576, 2691, 2935, 3179, 3424, 3583, 
	3831, 3847, 3961, 4205, 4375, 4531, 4765, 4935, 
	5179, 5423, 5593, 5763, 5849, 5935, 6025, 6026, 
	6270, 6271, 6287, 6531, 6532, 6738, 6987, 7236, 
	7485, 7486, 7487, 7488, 7646, 7650, 7894, 7987, 
	8078, 8169, 8413, 8657, 8901, 9145, 9389, 9633, 
	9877, 10121, 10365, 10522, 10753, 10983, 11213, 11443, 
	11673, 11903, 12133, 12301, 12469, 12637, 12805, 12810, 
	12815, 13043, 13275, 13519, 13727, 13836, 14084, 14085, 
	14291, 14292, 14498, 14499, 14705, 14814, 14822, 14908, 
	14994, 14999, 15113, 15357, 15601, 15845, 16089, 16247, 
	16385, 16589, 16590, 16591, 16729, 16867, 16949, 17082, 
	17083, 17084, 17314, 17315, 17563, 17811, 18059, 18060, 
	18151, 18242, 18243, 18399, 18400, 18401, 18405, 18650, 
	18651, 18655, 18656, 18803, 19031, 19261, 19262, 19263, 
	19264
};

unsigned short Parser_targs[] = {
	1, 2, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 15, 
	15, 15, 15, 15, 16, 17, 18, 19, 
	20, 21, 22, 23, 24, 25, 26, 27, 
	28, 29, 30, 31, 32, 33, 34, 35, 
	35, 36, 37, 38, 39, 40, 41, 42, 
	43, 44, 45, 46, 47, 48, 49, 50, 
	51, 52, 53, 54, 55, 56, 57, 58, 
	59, 60, 61, 62, 63, 64, 65, 66, 
	67, 68, 69, 70, 71, 72, 73, 74, 
	75, 76, 77, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 87, 88, 89, 90, 
	91, 92, 93, 94, 95, 96, 97, 98, 
	99, 100, 101, 102, 103, 104, 105, 106, 
	107, 108, 109, 110, 111, 112, 113, 114, 
	115, 116, 117, 118, 119, 120, 121, 122, 
	123, 124, 125, 126, 127, 128, 129, 130, 
	131, 132, 133, 134, 135, 136, 137, 138, 
	139, 140, 141, 142, 143, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144, 144, 144, 144, 144, 144, 144, 
	144, 144
};

unsigned int Parser_actInds[] = {
	0, 2, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 22, 24, 26, 28, 30, 
	33, 36, 39, 42, 45, 47, 49, 51, 
	53, 55, 57, 59, 61, 63, 65, 67, 
	69, 71, 73, 75, 77, 79, 81, 83, 
	85, 88, 90, 92, 94, 96, 98, 100, 
	102, 104, 106, 108, 110, 112, 114, 116, 
	118, 120, 122, 124, 126, 128, 130, 132, 
	134, 136, 138, 140, 142, 144, 146, 148, 
	150, 152, 154, 156, 158, 160, 162, 164, 
	166, 168, 170, 172, 174, 176, 178, 180, 
	182, 184, 186, 188, 190, 192, 195, 197, 
	199, 201, 203, 205, 207, 209, 211, 213, 
	215, 217, 219, 221, 223, 225, 227, 229, 
	231, 233, 235, 237, 239, 241, 243, 245, 
	247, 249, 251, 253, 255, 257, 259, 261, 
	263, 265, 267, 269, 271, 273, 275, 277, 
	279, 281, 283, 285, 287, 289, 291, 293, 
	295, 297, 299, 301, 303, 305, 307, 309, 
	311, 313, 315, 317, 319, 321, 323, 325, 
	327, 329, 331, 333, 335, 337, 339, 341, 
	343, 345, 347, 349, 351, 353, 355, 357, 
	359, 361, 363, 365, 367, 369, 371, 373, 
	375, 377, 379, 381, 383, 385, 387, 389, 
	391, 393, 395, 397, 399, 401, 403, 405, 
	407, 409, 411, 413, 415, 417, 419, 421, 
	423, 425, 427, 429, 431, 433, 435, 437, 
	439, 441, 443, 445, 447, 449, 451, 453, 
	455, 457, 459, 461, 463, 465, 467, 469, 
	471, 473, 475, 477, 479, 481, 483, 485, 
	487, 489, 491, 493, 495, 497, 499, 501, 
	503, 505, 507, 509, 511, 513, 515, 517, 
	519, 521, 523, 525, 527, 529, 531, 533, 
	535, 537, 539, 541, 543, 545, 547, 549, 
	551, 553, 555, 557, 559, 561, 563, 565, 
	567, 569, 571, 573, 575, 577, 579, 581, 
	583, 585, 587, 589, 591, 593, 595, 597, 
	599, 601, 603, 605, 607, 609, 611, 613, 
	615, 617, 619, 621, 623, 625, 627, 629, 
	631, 633, 635, 637, 639, 641, 643, 645, 
	647, 649, 651, 653, 655, 657, 659, 661, 
	663, 665, 667, 669, 671, 673, 675, 677, 
	679, 681, 683, 685, 687, 689, 691, 693, 
	695, 697, 699, 701, 703, 705, 707, 709, 
	711, 713, 715, 717, 719, 721, 723, 725, 
	727, 729, 731, 733, 735, 737, 739, 741, 
	743, 745, 747, 749, 751, 753, 755, 757, 
	759, 761, 763, 765, 767, 769, 771, 773, 
	775, 777, 779, 781, 783, 785, 787, 789, 
	791, 793
};

unsigned int Parser_actions[] = {
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 170, 1, 
	0, 174, 1, 0, 178, 1, 0, 182, 
	1, 0, 186, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 66, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 270, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 2, 0, 7, 0, 10, 0, 15, 
	0, 18, 0, 59, 0, 62, 0, 63, 
	0, 66, 0, 71, 0, 75, 0, 79, 
	0, 83, 0, 87, 0, 91, 0, 95, 
	0, 99, 0, 103, 0, 107, 0, 111, 
	0, 115, 0, 118, 0, 122, 0, 127, 
	0, 131, 0, 135, 0, 139, 0, 143, 
	0, 147, 0, 151, 0, 155, 0, 158, 
	0, 162, 0, 166, 0, 170, 0, 174, 
	0, 178, 0, 182, 0, 186, 0, 191, 
	0, 195, 0, 199, 0, 203, 0, 207, 
	0, 211, 0, 215, 0, 218, 0, 223, 
	0, 226, 0, 231, 0, 235, 0, 239, 
	0, 243, 0, 247, 0, 251, 0, 255, 
	0, 259, 0, 263, 0, 267, 0, 270, 
	0, 274, 0, 278, 0, 282, 0, 286, 
	0, 291, 0, 295, 0, 299, 0, 303, 
	0, 307, 0, 311, 0, 315, 0, 319, 
	0, 323, 0, 327, 0, 331, 0, 335, 
	0, 339, 0, 343, 0, 347, 0, 351, 
	0, 355, 0, 359, 0, 363, 0, 367, 
	0, 371, 0, 375, 0, 379, 0, 383, 
	0, 387, 0, 391, 0, 395, 0, 399, 
	0, 403, 0, 407, 0, 411, 0, 415, 
	0, 419, 0, 423, 0, 427, 0, 431, 
	0, 435, 0, 439, 0, 443, 0, 447, 
	0, 451, 0, 455, 0, 459, 0, 463, 
	0, 467, 0, 471, 0, 475, 0, 479, 
	0, 483, 0, 487, 0, 491, 0, 495, 
	0, 499, 0, 503, 0, 507, 0, 511, 
	0, 515, 0, 519, 0, 523, 0, 527, 
	0, 531, 0, 535, 0, 539, 0, 543, 
	0, 547, 0, 551, 0, 555, 0, 559, 
	0, 563, 0, 567, 0, 570, 0, 571, 
	0, 575, 0, 578, 0, 583, 0, 587, 
	0, 591, 0, 595, 0, 598, 0, 603, 
	0, 607, 0, 611, 0, 615, 0, 619, 
	0, 623, 0, 627, 0, 631, 0, 635, 
	0, 639, 0, 643, 0, 647, 0, 651, 
	0, 654, 0, 658, 0, 662, 0, 663, 
	0, 667, 0, 671, 0, 675, 0, 679, 
	0, 683, 0, 686, 0, 687, 0, 690, 
	0, 691, 0, 695, 0, 699, 0, 703, 
	0, 707, 0, 710, 0, 715, 0, 718, 
	0, 723, 0, 727, 0, 731, 0, 735, 
	0, 739, 0, 742, 0, 746, 0, 751, 
	0, 755, 0, 758, 0, 763, 0, 767, 
	0, 771, 0, 775, 0, 779, 0, 783, 
	0, 787, 0, 791, 0, 795, 0, 799, 
	0, 803, 0, 807, 0, 811, 0, 815, 
	0, 819, 0, 823, 0, 827, 0, 831, 
	0, 835, 0, 839, 0, 843, 0, 846, 
	0, 851, 0, 855, 0, 859, 0, 863, 
	0, 867, 0, 871, 0, 875, 0, 879, 
	0, 883, 0, 887, 0, 891, 0, 895, 
	0, 899, 0, 903, 0, 907, 0, 911, 
	0, 915, 0, 919, 0, 923, 0, 927, 
	0, 930, 0, 934, 0, 938, 0, 943, 
	0, 946, 0, 951, 0, 955, 0, 23, 
	0, 27, 0, 31, 0, 35, 0, 39, 
	0, 43, 0, 47, 0, 51, 0, 55, 
	0, 1, 0
};

int Parser_commitLen[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2
};

unsigned int Parser_fssProdIdIndex[] = {
	0, 1, 2, 3, 4, 5, 6, 7, 
	8, 9, 10, 11, 12, 13, 14, 15, 
	16, 17, 18, 19, 20, 21, 22, 23, 
	24, 25, 26, 27, 28, 29, 30, 31, 
	32, 33, 34, 35, 36, 37, 38, 39, 
	40, 41, 42, 43, 44, 45, 46, 47, 
	48, 49, 50, 51, 52, 53, 54, 55, 
	56, 57, 58, 59, 60, 61, 62, 63, 
	64, 65, 66, 67, 68, 69, 70, 71, 
	72, 73, 74, 75, 76, 77, 78, 79, 
	80, 81, 82, 83, 84, 85, 86, 87, 
	88, 89, 90, 91, 92, 93, 94, 95, 
	96, 97, 98, 99, 100, 101, 102, 103, 
	104, 105, 106, 107, 108, 109, 110, 111, 
	112, 113, 114, 115, 116, 117, 118, 119, 
	120, 121, 122, 123, 124, 125, 126, 127, 
	128, 129, 130, 131, 132, 133, 134, 135, 
	136, 137, 138, 139, 140, 141, 142, 143, 
	144, 145, 146, 147, 148, 149, 150, 151, 
	152, 153, 154, 155, 156, 157, 158, 159, 
	160, 161, 162, 163, 164, 165, 166, 167, 
	168, 169, 170, 171, 172, 173, 174, 175, 
	176, 177, 178, 179, 180, 181, 182, 183, 
	184, 185, 186, 187, 188, 189, 190, 191, 
	192, 193, 194, 195, 196, 197, 198, 199, 
	200, 201, 202, 203, 204, 205, 206, 207, 
	208, 209, 210, 211, 212, 213, 214, 215, 
	216, 217, 218, 219, 220, 221, 222, 223, 
	224, 225, 226, 227, 228, 229, 230, 231, 
	232, 233, 234, 235, 236, 237, 238, 239
};

char Parser_fssProdLengths[] = {
	1, 3, 0, 2, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 4, 5, 5, 1, 5, 4, 3, 
	4, 3, 3, 5, 2, 0, 1, 4, 
	2, 1, 1, 1, 3, 2, 1, 0, 
	3, 1, 3, 3, 3, 3, 1, 2, 
	3, 3, 3, 3, 1, 3, 1, 3, 
	1, 3, 3, 7, 3, 3, 3, 3, 
	3, 3, 7, 1, 1, 1, 1, 1, 
	1, 2, 1, 2, 1, 2, 1, 1, 
	2, 1, 2, 1, 2, 1, 2, 1, 
	2, 1, 2, 1, 2, 1, 2, 1, 
	2, 1, 2, 1, 2, 1, 2, 1, 
	2, 1, 2, 1, 2, 1, 2, 1, 
	2, 1, 2, 1, 2, 1, 2, 1, 
	2, 1, 2, 1, 2, 1, 2, 1, 
	2, 1, 2, 1, 2, 1, 2, 1, 
	2, 1, 2, 1, 3, 1, 1, 3, 
	1, 1, 1, 2, 2, 1, 2, 2, 
	2, 2, 4, 5, 5, 6, 1, 1, 
	2, 2, 1, 1, 1, 1, 3, 3, 
	3, 3, 3, 1, 1, 1, 2, 1, 
	2, 0, 2, 1, 3, 3, 1, 1, 
	2, 0, 1, 3, 2, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 3, 3, 4, 3, 4, 3, 4, 
	2, 2, 2, 0, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 4, 
	2, 0, 2, 1, 0, 3, 1, 1
};

unsigned short Parser_prodLhsIds[] = {
	226, 225, 225, 227, 227, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 238, 239, 
	239, 237, 229, 230, 240, 231, 232, 232, 
	233, 234, 235, 236, 246, 246, 242, 242, 
	247, 247, 248, 248, 248, 249, 249, 249, 
	241, 241, 252, 252, 252, 252, 252, 253, 
	253, 253, 253, 253, 253, 254, 254, 255, 
	255, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 258, 258, 258, 258, 
	261, 261, 261, 261, 261, 261, 261, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 264, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 266, 
	266, 266, 266, 266, 266, 266, 266, 266, 
	266, 266, 266, 250, 250, 250, 269, 251, 
	260, 259, 270, 270, 270, 267, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 271, 
	272, 272, 272, 273, 273, 273, 273, 273, 
	273, 273, 273, 276, 276, 244, 244, 244, 
	275, 275, 277, 277, 278, 278, 278, 278, 
	274, 274, 279, 279, 243, 243, 280, 280, 
	280, 283, 283, 283, 283, 283, 283, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 245, 245, 286, 286, 286, 282, 
	282, 282, 282, 282, 282, 282, 287, 287, 
	287, 287, 287, 284, 284, 284, 284, 284, 
	256, 288, 285, 290, 290, 289, 289, 291
};

const char *Parser_prodNames[] = {
	"start-1",
	"section_list-1",
	"section_list-2",
	"statement_list-1",
	"statement_list-2",
	"statement-1",
	"statement-2",
	"statement-3",
	"statement-4",
	"statement-5",
	"statement-6",
	"statement-7",
	"statement-8",
	"statement-9",
	"export_open-1",
	"opt_export-1",
	"opt_export-2",
	"export_block-1",
	"assignment-1",
	"instantiation-1",
	"machine_name-1",
	"action_spec-1",
	"alphtype_spec-1",
	"alphtype_spec-2",
	"range_spec-1",
	"getkey_spec-1",
	"access_spec-1",
	"variable_spec-1",
	"opt_whitespace-1",
	"opt_whitespace-2",
	"join_or_lm-1",
	"join_or_lm-2",
	"lm_part_list-1",
	"lm_part_list-2",
	"longest_match_part-1",
	"longest_match_part-2",
	"longest_match_part-3",
	"opt_lm_part_action-1",
	"opt_lm_part_action-2",
	"opt_lm_part_action-3",
	"join-1",
	"join-2",
	"expression-1",
	"expression-2",
	"expression-3",
	"expression-4",
	"expression-5",
	"term-1",
	"term-2",
	"term-3",
	"term-4",
	"term-5",
	"term-6",
	"factor_with_label-1",
	"factor_with_label-2",
	"factor_with_ep-1",
	"factor_with_ep-2",
	"factor_with_aug-1",
	"factor_with_aug-2",
	"factor_with_aug-3",
	"factor_with_aug-4",
	"factor_with_aug-5",
	"factor_with_aug-6",
	"factor_with_aug-7",
	"factor_with_aug-8",
	"factor_with_aug-9",
	"factor_with_aug-10",
	"factor_with_aug-11",
	"aug_type_base-1",
	"aug_type_base-2",
	"aug_type_base-3",
	"aug_type_base-4",
	"aug_type_cond-1",
	"aug_type_cond-2",
	"aug_type_cond-3",
	"aug_type_cond-4",
	"aug_type_cond-5",
	"aug_type_cond-6",
	"aug_type_cond-7",
	"aug_type_to_state-1",
	"aug_type_to_state-2",
	"aug_type_to_state-3",
	"aug_type_to_state-4",
	"aug_type_to_state-5",
	"aug_type_to_state-6",
	"aug_type_to_state-7",
	"aug_type_to_state-8",
	"aug_type_to_state-9",
	"aug_type_to_state-10",
	"aug_type_to_state-11",
	"aug_type_to_state-12",
	"aug_type_from_state-1",
	"aug_type_from_state-2",
	"aug_type_from_state-3",
	"aug_type_from_state-4",
	"aug_type_from_state-5",
	"aug_type_from_state-6",
	"aug_type_from_state-7",
	"aug_type_from_state-8",
	"aug_type_from_state-9",
	"aug_type_from_state-10",
	"aug_type_from_state-11",
	"aug_type_from_state-12",
	"aug_type_eof-1",
	"aug_type_eof-2",
	"aug_type_eof-3",
	"aug_type_eof-4",
	"aug_type_eof-5",
	"aug_type_eof-6",
	"aug_type_eof-7",
	"aug_type_eof-8",
	"aug_type_eof-9",
	"aug_type_eof-10",
	"aug_type_eof-11",
	"aug_type_eof-12",
	"aug_type_gbl_error-1",
	"aug_type_gbl_error-2",
	"aug_type_gbl_error-3",
	"aug_type_gbl_error-4",
	"aug_type_gbl_error-5",
	"aug_type_gbl_error-6",
	"aug_type_gbl_error-7",
	"aug_type_gbl_error-8",
	"aug_type_gbl_error-9",
	"aug_type_gbl_error-10",
	"aug_type_gbl_error-11",
	"aug_type_gbl_error-12",
	"aug_type_local_error-1",
	"aug_type_local_error-2",
	"aug_type_local_error-3",
	"aug_type_local_error-4",
	"aug_type_local_error-5",
	"aug_type_local_error-6",
	"aug_type_local_error-7",
	"aug_type_local_error-8",
	"aug_type_local_error-9",
	"aug_type_local_error-10",
	"aug_type_local_error-11",
	"aug_type_local_error-12",
	"action_embed-1",
	"action_embed-2",
	"action_embed-3",
	"action_embed_word-1",
	"action_embed_block-1",
	"priority_name-1",
	"priority_aug-1",
	"priority_aug_num-1",
	"priority_aug_num-2",
	"priority_aug_num-3",
	"local_err_name-1",
	"factor_with_rep-1",
	"factor_with_rep-2",
	"factor_with_rep-3",
	"factor_with_rep-4",
	"factor_with_rep-5",
	"factor_with_rep-6",
	"factor_with_rep-7",
	"factor_with_rep-8",
	"factor_with_rep-9",
	"factor_rep_num-1",
	"factor_with_neg-1",
	"factor_with_neg-2",
	"factor_with_neg-3",
	"factor-1",
	"factor-2",
	"factor-3",
	"factor-4",
	"factor-5",
	"factor-6",
	"factor-7",
	"factor-8",
	"range_lit-1",
	"range_lit-2",
	"alphabet_num-1",
	"alphabet_num-2",
	"alphabet_num-3",
	"regular_expr-1",
	"regular_expr-2",
	"regular_expr_item-1",
	"regular_expr_item-2",
	"regular_expr_char-1",
	"regular_expr_char-2",
	"regular_expr_char-3",
	"regular_expr_char-4",
	"regular_expr_or_data-1",
	"regular_expr_or_data-2",
	"regular_expr_or_char-1",
	"regular_expr_or_char-2",
	"inline_block-1",
	"inline_block-2",
	"inline_block_item-1",
	"inline_block_item-2",
	"inline_block_item-3",
	"inline_block_symbol-1",
	"inline_block_symbol-2",
	"inline_block_symbol-3",
	"inline_block_symbol-4",
	"inline_block_symbol-5",
	"inline_block_symbol-6",
	"inline_block_interpret-1",
	"inline_block_interpret-2",
	"inline_block_interpret-3",
	"inline_block_interpret-4",
	"inline_block_interpret-5",
	"inline_block_interpret-6",
	"inline_block_interpret-7",
	"inline_block_interpret-8",
	"inline_block_interpret-9",
	"inline_block_interpret-10",
	"inline_block_interpret-11",
	"inline_expr-1",
	"inline_expr-2",
	"inline_expr_item-1",
	"inline_expr_item-2",
	"inline_expr_item-3",
	"inline_expr_any-1",
	"inline_expr_any-2",
	"inline_expr_any-3",
	"inline_expr_any-4",
	"inline_expr_any-5",
	"inline_expr_any-6",
	"inline_expr_any-7",
	"inline_expr_symbol-1",
	"inline_expr_symbol-2",
	"inline_expr_symbol-3",
	"inline_expr_symbol-4",
	"inline_expr_symbol-5",
	"inline_expr_interpret-1",
	"inline_expr_interpret-2",
	"inline_expr_interpret-3",
	"inline_expr_interpret-4",
	"inline_expr_interpret-5",
	"local_state_ref-1",
	"no_name_sep-1",
	"state_ref-1",
	"opt_name_sep-1",
	"opt_name_sep-2",
	"state_ref_names-1",
	"state_ref_names-2",
	"_start-1"
};

const char *Parser_lelNames[] = {
	"D-0",
	"D-1",
	"D-2",
	"D-3",
	"D-4",
	"D-5",
	"D-6",
	"D-7",
	"D-8",
	"D-9",
	"D-10",
	"D-11",
	"D-12",
	"D-13",
	"D-14",
	"D-15",
	"D-16",
	"D-17",
	"D-18",
	"D-19",
	"D-20",
	"D-21",
	"D-22",
	"D-23",
	"D-24",
	"D-25",
	"D-26",
	"D-27",
	"D-28",
	"D-29",
	"D-30",
	"D-31",
	"D-32",
	"!",
	"\"",
	"#",
	"$",
	"%",
	"&",
	"'",
	"(",
	")",
	"*",
	"+",
	",",
	"-",
	".",
	"/",
	"0",
	"1",
	"2",
	"3",
	"4",
	"5",
	"6",
	"7",
	"8",
	"9",
	":",
	";",
	"<",
	"=",
	">",
	"?",
	"@",
	"A",
	"B",
	"C",
	"D",
	"E",
	"F",
	"G",
	"H",
	"I",
	"J",
	"K",
	"L",
	"M",
	"N",
	"O",
	"P",
	"Q",
	"R",
	"S",
	"T",
	"U",
	"V",
	"W",
	"X",
	"Y",
	"Z",
	"[",
	"\\",
	"]",
	"^",
	"_",
	"`",
	"a",
	"b",
	"c",
	"d",
	"e",
	"f",
	"g",
	"h",
	"i",
	"j",
	"k",
	"l",
	"m",
	"n",
	"o",
	"p",
	"q",
	"r",
	"s",
	"t",
	"u",
	"v",
	"w",
	"x",
	"y",
	"z",
	"{",
	"|",
	"}",
	"~",
	"D-127",
	"KW_Machine",
	"KW_Include",
	"KW_Import",
	"KW_Write",
	"TK_Word",
	"TK_Literal",
	"TK_Number",
	"TK_Inline",
	"TK_Reference",
	"TK_ColonEquals",
	"TK_EndSection",
	"TK_UInt",
	"TK_Hex",
	"TK_BaseClause",
	"TK_DotDot",
	"TK_ColonGt",
	"TK_ColonGtGt",
	"TK_LtColon",
	"TK_Arrow",
	"TK_DoubleArrow",
	"TK_StarStar",
	"TK_NameSep",
	"TK_BarStar",
	"TK_DashDash",
	"TK_StartCond",
	"TK_AllCond",
	"TK_LeavingCond",
	"TK_Middle",
	"TK_StartGblError",
	"TK_AllGblError",
	"TK_FinalGblError",
	"TK_NotFinalGblError",
	"TK_NotStartGblError",
	"TK_MiddleGblError",
	"TK_StartLocalError",
	"TK_AllLocalError",
	"TK_FinalLocalError",
	"TK_NotFinalLocalError",
	"TK_NotStartLocalError",
	"TK_MiddleLocalError",
	"TK_StartEOF",
	"TK_AllEOF",
	"TK_FinalEOF",
	"TK_NotFinalEOF",
	"TK_NotStartEOF",
	"TK_MiddleEOF",
	"TK_StartToState",
	"TK_AllToState",
	"TK_FinalToState",
	"TK_NotFinalToState",
	"TK_NotStartToState",
	"TK_MiddleToState",
	"TK_StartFromState",
	"TK_AllFromState",
	"TK_FinalFromState",
	"TK_NotFinalFromState",
	"TK_NotStartFromState",
	"TK_MiddleFromState",
	"RE_Slash",
	"RE_SqOpen",
	"RE_SqOpenNeg",
	"RE_SqClose",
	"RE_Dot",
	"RE_Star",
	"RE_Dash",
	"RE_Char",
	"IL_WhiteSpace",
	"IL_Comment",
	"IL_Literal",
	"IL_Symbol",
	"KW_Action",
	"KW_AlphType",
	"KW_Range",
	"KW_GetKey",
	"KW_When",
	"KW_Eof",
	"KW_Err",
	"KW_Lerr",
	"KW_To",
	"KW_From",
	"KW_Export",
	"KW_Break",
	"KW_Exec",
	"KW_Hold",
	"KW_PChar",
	"KW_Char",
	"KW_Goto",
	"KW_Call",
	"KW_Ret",
	"KW_CurState",
	"KW_TargState",
	"KW_Entry",
	"KW_Next",
	"KW_Variable",
	"KW_Access",
	"TK_Semi",
	"_eof",
	"section_list",
	"start",
	"statement_list",
	"statement",
	"assignment",
	"instantiation",
	"action_spec",
	"alphtype_spec",
	"range_spec",
	"getkey_spec",
	"access_spec",
	"variable_spec",
	"export_block",
	"export_open",
	"opt_export",
	"machine_name",
	"join",
	"join_or_lm",
	"inline_block",
	"alphabet_num",
	"inline_expr",
	"opt_whitespace",
	"lm_part_list",
	"longest_match_part",
	"opt_lm_part_action",
	"action_embed",
	"action_embed_block",
	"expression",
	"term",
	"factor_with_label",
	"factor_with_ep",
	"local_state_ref",
	"factor_with_aug",
	"aug_type_base",
	"priority_aug",
	"priority_name",
	"aug_type_cond",
	"aug_type_to_state",
	"aug_type_from_state",
	"aug_type_eof",
	"aug_type_gbl_error",
	"aug_type_local_error",
	"local_err_name",
	"factor_with_rep",
	"action_embed_word",
	"priority_aug_num",
	"factor_rep_num",
	"factor_with_neg",
	"factor",
	"regular_expr_or_data",
	"regular_expr",
	"range_lit",
	"regular_expr_item",
	"regular_expr_char",
	"regular_expr_or_char",
	"inline_block_item",
	"inline_block_interpret",
	"inline_expr_any",
	"inline_block_symbol",
	"inline_expr_interpret",
	"state_ref",
	"inline_expr_item",
	"inline_expr_symbol",
	"no_name_sep",
	"state_ref_names",
	"opt_name_sep",
	"_start"
};

#line 1375 "rlparse.kl"


void Parser::init()
{
	#line 3769 "rlparse.cpp"
	curs = Parser_startState;
	pool = 0;
	freshEl = (struct Parser_LangEl*) malloc( sizeof(struct Parser_LangEl)*8128);
	#ifdef LOG_ACTIONS
	cerr << "allocating 8128 LangEls" << endl;
	#endif
	stackTop = freshEl;
	stackTop->type = 0;
	stackTop->state = -1;
	stackTop->next = 0;
	stackTop->child = 0;
	freshPos = 1;
	lastFinal = stackTop;
	numRetry = 0;
	numNodes = 0;
	errCount = 0;
#line 1380 "rlparse.kl"
}

int Parser::parseLangEl( int type, const Token *token )
{
	#line 3791 "rlparse.cpp"
#define reject() induceReject = 1

	int pos, targState;
	unsigned int *action;
	int rhsLen;
	struct Parser_LangEl *rhs[32];
	struct Parser_LangEl *lel;
	struct Parser_LangEl *input;
	char induceReject;

	if ( curs < 0 )
		return 0;

	if ( pool == 0 ) {
		if ( freshPos == 8128 ) {
			freshEl = (struct Parser_LangEl*) malloc(
					sizeof(struct Parser_LangEl)*8128);
			#ifdef LOG_ACTIONS
			cerr << "allocating 8128 LangEls" << endl;
			#endif
			freshPos = 0;
		}
		input = freshEl + freshPos++;
	}
	else {
		input = pool;
		pool = pool->next;
	}
	numNodes += 1;
	input->type = type;
	input->user.token = *token;
	input->next = 0;
	input->retry = 0;
	input->child = 0;

again:
	if ( input == 0 )
		goto _out;

	lel = input;
	if ( lel->type < Parser_keys[curs<<1] || lel->type > Parser_keys[(curs<<1)+1] )
		goto parseError;

	pos = Parser_indicies[Parser_offsets[curs] + (lel->type - Parser_keys[curs<<1])];
	if ( pos < 0 )
		goto parseError;

	induceReject = 0;
	targState = Parser_targs[pos];
	action = Parser_actions + Parser_actInds[pos];
	if ( lel->retry & 0x0000ffff )
		action += (lel->retry & 0x0000ffff);

	if ( *action & 0x1 ) {
		#ifdef LOG_ACTIONS
		cerr << "shifted: " << Parser_lelNames[lel->type];
		#endif
		input = input->next;
		lel->state = curs;
		lel->next = stackTop;
		stackTop = lel;

		if ( action[1] == 0 )
			lel->retry &= 0xffff0000;
		else {
			lel->retry += 1;
			numRetry += 1;
			#ifdef LOG_ACTIONS
			cerr << " retry: " << stackTop;
			#endif
		}
		#ifdef LOG_ACTIONS
		cerr << endl;
		#endif
	}

	if ( Parser_commitLen[pos] != 0 ) {
		struct Parser_LangEl *commitHead = stackTop;
		int absCommitLen = Parser_commitLen[pos];

		#ifdef LOG_ACTIONS
		cerr << "running commit of length: " << Parser_commitLen[pos] << endl;
		#endif

		if ( absCommitLen < 0 ) {
			commitHead = commitHead->next;
			absCommitLen = -1 * absCommitLen;
		}
		{
			struct Parser_LangEl *lel = commitHead;
			struct Parser_LangEl **cmStack = (struct Parser_LangEl**) malloc( sizeof(struct Parser_LangEl) * numNodes);
			int n = absCommitLen, depth = 0, sp = 0;

commit_head:
			if ( lel->retry > 0 ) {
				if ( lel->retry & 0x0000ffff )
					numRetry -= 1;
				if ( lel->retry & 0xffff0000 )
					numRetry -= 1;
				lel->retry = 0;
			}

			/* If depth is > 0 then move over lel freely, otherwise, make
			 * sure that we have not already done n steps down the line. */
			if ( lel->next != 0 && ( depth > 0 || n > 1 ) ) {
				cmStack[sp++] = lel;
				lel = lel->next;

				/* If we are at the top level count the steps down the line. */
				if ( depth == 0 )
					n -= 1;
				goto commit_head;
			}

commit_reverse:
			if ( lel->child != 0 ) {
				cmStack[sp++] = lel;
				lel = lel->child;

				/* When we move down we need to increment the depth. */
				depth += 1;
				goto commit_head;
			}

commit_upwards:
			if ( sp > 0 ) {
				/* Figure out which place to return to. */
				if ( cmStack[sp-1]->next == lel ) {
					lel = cmStack[--sp];
					goto commit_reverse;
				}
				else {
					/* Going back up, adjust the depth. */
					lel = cmStack[--sp];
					depth -= 1;
					goto commit_upwards;
				}
			}
			free( cmStack );
		}
		if ( numRetry == 0 ) {
			#ifdef LOG_ACTIONS
			cerr << "number of retries is zero, "
				"executing final actions" << endl;
			#endif
			{
				struct Parser_LangEl *lel = commitHead;
				struct Parser_LangEl **cmStack = (struct Parser_LangEl**) malloc( sizeof( struct Parser_LangEl) * numNodes);
				int sp = 0;
				char doExec = 0;

final_head:
				if ( lel == lastFinal ) {
					doExec = 1;
					goto hit_final;
				}

				if ( lel->next != 0 ) {
					cmStack[sp++] = lel;
					lel = lel->next;
					goto final_head;
				}

final_reverse:

				if ( lel->child != 0 ) {
					cmStack[sp++] = lel;
					lel = lel->child;
					goto final_head;
				}

final_upwards:

				if ( doExec ) {
{
	if ( lel->type < 225 ) {
	}
	else {
		struct Parser_LangEl *redLel = lel;
		if ( redLel->child != 0 ) {
			int r = Parser_fssProdLengths[redLel->reduction] - 1;
			struct Parser_LangEl *rhsEl = redLel->child;
			while ( rhsEl != 0 ) {
				rhs[r--] = rhsEl;
				rhsEl = rhsEl->next;
			}
		}
switch ( lel->reduction ) {
case 14: {
#line 59 "rlparse.kl"

		exportContext.append( true );
	

#line 3985 "rlparse.cpp"
} break;
case 15: {
#line 68 "rlparse.kl"
 (&redLel->user.opt_export)->isSet = true; 

#line 3991 "rlparse.cpp"
} break;
case 16: {
#line 69 "rlparse.kl"
 (&redLel->user.opt_export)->isSet = false; 

#line 3997 "rlparse.cpp"
} break;
case 17: {
#line 72 "rlparse.kl"

		exportContext.remove( exportContext.length()-1 );
	

#line 4005 "rlparse.cpp"
} break;
case 18: {
#line 77 "rlparse.kl"

		/* Main machine must be an instance. */
		bool isInstance = false;
		if ( strcmp((&rhs[1]->user.token_type)->token.data, mainMachine) == 0 ) {
			warning((&rhs[1]->user.token_type)->token.loc) << 
					"main machine will be implicitly instantiated" << endl;
			isInstance = true;
		}

		/* Generic creation of machine for instantiation and assignment. */
		JoinOrLm *joinOrLm = new JoinOrLm( (&rhs[3]->user.join)->join );
		tryMachineDef( (&rhs[1]->user.token_type)->token.loc, (&rhs[1]->user.token_type)->token.data, joinOrLm, isInstance );

		if ( (&rhs[0]->user.opt_export)->isSet )
			exportContext.remove( exportContext.length()-1 );
	

#line 4026 "rlparse.cpp"
} break;
case 19: {
#line 95 "rlparse.kl"

		/* Generic creation of machine for instantiation and assignment. */
		tryMachineDef( (&rhs[1]->user.token_type)->token.loc, (&rhs[1]->user.token_type)->token.data, (&rhs[3]->user.join_or_lm)->joinOrLm, true );

		if ( (&rhs[0]->user.opt_export)->isSet )
			exportContext.remove( exportContext.length()-1 );
	

#line 4038 "rlparse.cpp"
} break;
case 20: {
#line 111 "rlparse.kl"

		/* Make/get the priority key. The name may have already been referenced
		 * and therefore exist. */
		PriorDictEl *priorDictEl;
		if ( pd->priorDict.insert( (&rhs[0]->user.token)->data, pd->nextPriorKey, &priorDictEl ) )
			pd->nextPriorKey += 1;
		pd->curDefPriorKey = priorDictEl->value;

		/* Make/get the local error key. */
		LocalErrDictEl *localErrDictEl;
		if ( pd->localErrDict.insert( (&rhs[0]->user.token)->data, pd->nextLocalErrKey, &localErrDictEl ) )
			pd->nextLocalErrKey += 1;
		pd->curDefLocalErrKey = localErrDictEl->value;

		(&redLel->user.token_type)->token = *(&rhs[0]->user.token);
	

#line 4059 "rlparse.cpp"
} break;
case 21: {
#line 129 "rlparse.kl"

		if ( pd->actionDict.find( (&rhs[1]->user.token)->data ) ) {
			/* Recover by just ignoring the duplicate. */
			error((&rhs[1]->user.token)->loc) << "action \"" << (&rhs[1]->user.token)->data << "\" already defined" << endl;
		}
		else {
			//cerr << "NEW ACTION " << $2->data << " " << $4->inlineList << endl;
			/* Add the action to the list of actions. */
			Action *newAction = new Action( (&rhs[2]->user.token)->loc, (&rhs[1]->user.token)->data, 
					(&rhs[3]->user.inline_list)->inlineList, pd->nextCondId++ );

			/* Insert to list and dict. */
			pd->actionList.append( newAction );
			pd->actionDict.insert( newAction );
		}
	

#line 4080 "rlparse.cpp"
} break;
case 22: {
#line 149 "rlparse.kl"

		if ( ! pd->setAlphType( (&rhs[1]->user.token)->data, (&rhs[2]->user.token)->data ) ) {
			// Recover by ignoring the alphtype statement.
			error((&rhs[1]->user.token)->loc) << "\"" << (&rhs[1]->user.token)->data << 
					" " << (&rhs[2]->user.token)->data << "\" is not a valid alphabet type" << endl;
		}
	

#line 4092 "rlparse.cpp"
} break;
case 23: {
#line 158 "rlparse.kl"

		if ( ! pd->setAlphType( (&rhs[1]->user.token)->data ) ) {
			// Recover by ignoring the alphtype statement.
			error((&rhs[1]->user.token)->loc) << "\"" << (&rhs[1]->user.token)->data << 
					"\" is not a valid alphabet type" << endl;
		}
	

#line 4104 "rlparse.cpp"
} break;
case 24: {
#line 168 "rlparse.kl"

		// Save the upper and lower ends of the range and emit the line number.
		pd->lowerNum = (&rhs[1]->user.token_type)->token.data;
		pd->upperNum = (&rhs[2]->user.token_type)->token.data;
		pd->rangeLowLoc = (&rhs[1]->user.token_type)->token.loc;
		pd->rangeHighLoc = (&rhs[2]->user.token_type)->token.loc;
	

#line 4116 "rlparse.cpp"
} break;
case 25: {
#line 177 "rlparse.kl"

		pd->getKeyExpr = (&rhs[1]->user.inline_list)->inlineList;
	

#line 4124 "rlparse.cpp"
} break;
case 26: {
#line 182 "rlparse.kl"

		pd->accessExpr = (&rhs[1]->user.inline_list)->inlineList;
	

#line 4132 "rlparse.cpp"
} break;
case 27: {
#line 187 "rlparse.kl"

		/* FIXME: Need to implement the rest of this. */
		if ( strcmp( (&rhs[2]->user.token)->data, "curstate" ) == 0 )
			pd->curStateExpr = (&rhs[3]->user.inline_list)->inlineList;
		else {
			error((&rhs[2]->user.token)->loc) << "sorry, unimplementd" << endl;
		}
	

#line 4145 "rlparse.cpp"
} break;
case 30: {
#line 209 "rlparse.kl"

		(&redLel->user.join_or_lm)->joinOrLm = new JoinOrLm( (&rhs[0]->user.join)->join );
	

#line 4153 "rlparse.cpp"
} break;
case 31: {
#line 213 "rlparse.kl"

		/* Create a new factor going to a longest match structure. Record
		 * in the parse data that we have a longest match. */
		LongestMatch *lm = new LongestMatch( (&rhs[0]->user.token)->loc, (&rhs[1]->user.lm_part_list)->lmPartList );
		pd->lmList.append( lm );
		for ( LmPartList::Iter lmp = *((&rhs[1]->user.lm_part_list)->lmPartList); lmp.lte(); lmp++ )
			lmp->longestMatch = lm;
		(&redLel->user.join_or_lm)->joinOrLm = new JoinOrLm( lm );
	

#line 4167 "rlparse.cpp"
} break;
case 32: {
#line 229 "rlparse.kl"

		if ( (&rhs[1]->user.longest_match_part)->lmPart != 0 ) 
			(&rhs[0]->user.lm_part_list)->lmPartList->append( (&rhs[1]->user.longest_match_part)->lmPart );
		(&redLel->user.lm_part_list)->lmPartList = (&rhs[0]->user.lm_part_list)->lmPartList;
	

#line 4177 "rlparse.cpp"
} break;
case 33: {
#line 235 "rlparse.kl"

		/* Create a new list with the part. */
		(&redLel->user.lm_part_list)->lmPartList = new LmPartList;
		if ( (&rhs[0]->user.longest_match_part)->lmPart != 0 )
			(&redLel->user.lm_part_list)->lmPartList->append( (&rhs[0]->user.longest_match_part)->lmPart );
	

#line 4188 "rlparse.cpp"
} break;
case 34: {
#line 248 "rlparse.kl"
 (&redLel->user.longest_match_part)->lmPart = 0; 

#line 4194 "rlparse.cpp"
} break;
case 35: {
#line 250 "rlparse.kl"
 (&redLel->user.longest_match_part)->lmPart = 0; 

#line 4200 "rlparse.cpp"
} break;
case 36: {
#line 252 "rlparse.kl"

		(&redLel->user.longest_match_part)->lmPart = 0;
		Action *action = (&rhs[1]->user.opt_lm_part_action)->action;
		if ( action != 0 )
			action->isLmAction = true;
		(&redLel->user.longest_match_part)->lmPart = new LongestMatchPart( (&rhs[0]->user.join)->join, action, 
				(&rhs[2]->user.token)->loc, pd->nextLongestMatchId++ );
	

#line 4213 "rlparse.cpp"
} break;
case 37: {
#line 267 "rlparse.kl"
 
		(&redLel->user.opt_lm_part_action)->action = (&rhs[1]->user.action_ref)->action;
	

#line 4221 "rlparse.cpp"
} break;
case 38: {
#line 271 "rlparse.kl"

		(&redLel->user.opt_lm_part_action)->action = (&rhs[0]->user.action_ref)->action;
	

#line 4229 "rlparse.cpp"
} break;
case 39: {
#line 275 "rlparse.kl"

		(&redLel->user.opt_lm_part_action)->action = 0;
	

#line 4237 "rlparse.cpp"
} break;
case 40: {
#line 286 "rlparse.kl"

		/* Append the expression to the list and return it. */
		(&rhs[0]->user.join)->join->exprList.append( (&rhs[2]->user.expression)->expression );
		(&redLel->user.join)->join = (&rhs[0]->user.join)->join;
	

#line 4247 "rlparse.cpp"
} break;
case 41: {
#line 292 "rlparse.kl"

		(&redLel->user.join)->join = new Join( (&rhs[0]->user.expression)->expression );
	

#line 4255 "rlparse.cpp"
} break;
case 42: {
#line 302 "rlparse.kl"

		(&redLel->user.expression)->expression = new Expression( (&rhs[0]->user.expression)->expression, 
				(&rhs[2]->user.term)->term, Expression::OrType );
	

#line 4264 "rlparse.cpp"
} break;
case 43: {
#line 307 "rlparse.kl"

		(&redLel->user.expression)->expression = new Expression( (&rhs[0]->user.expression)->expression, 
				(&rhs[2]->user.term)->term, Expression::IntersectType );
	

#line 4273 "rlparse.cpp"
} break;
case 44: {
#line 314 "rlparse.kl"

		(&redLel->user.expression)->expression = new Expression( (&rhs[0]->user.expression)->expression, 
				(&rhs[2]->user.term)->term, Expression::SubtractType );
	

#line 4282 "rlparse.cpp"
} break;
case 45: {
#line 319 "rlparse.kl"

		(&redLel->user.expression)->expression = new Expression( (&rhs[0]->user.expression)->expression, 
				(&rhs[2]->user.term)->term, Expression::StrongSubtractType );
	

#line 4291 "rlparse.cpp"
} break;
case 46: {
#line 324 "rlparse.kl"

		(&redLel->user.expression)->expression = new Expression( (&rhs[0]->user.term)->term );
	

#line 4299 "rlparse.cpp"
} break;
case 47: {
#line 334 "rlparse.kl"

		(&redLel->user.term)->term = new Term( (&rhs[0]->user.term)->term, (&rhs[1]->user.factor_with_label)->factorWithAug );
	

#line 4307 "rlparse.cpp"
} break;
case 48: {
#line 338 "rlparse.kl"

		(&redLel->user.term)->term = new Term( (&rhs[0]->user.term)->term, (&rhs[2]->user.factor_with_label)->factorWithAug );
	

#line 4315 "rlparse.cpp"
} break;
case 49: {
#line 342 "rlparse.kl"

		(&redLel->user.term)->term = new Term( (&rhs[0]->user.term)->term, (&rhs[2]->user.factor_with_label)->factorWithAug, Term::RightStartType );
	

#line 4323 "rlparse.cpp"
} break;
case 50: {
#line 346 "rlparse.kl"

		(&redLel->user.term)->term = new Term( (&rhs[0]->user.term)->term, (&rhs[2]->user.factor_with_label)->factorWithAug, Term::RightFinishType );
	

#line 4331 "rlparse.cpp"
} break;
case 51: {
#line 350 "rlparse.kl"

		(&redLel->user.term)->term = new Term( (&rhs[0]->user.term)->term, 
				(&rhs[2]->user.factor_with_label)->factorWithAug, Term::LeftType );
	

#line 4340 "rlparse.cpp"
} break;
case 52: {
#line 355 "rlparse.kl"

		(&redLel->user.term)->term = new Term( (&rhs[0]->user.factor_with_label)->factorWithAug );
	

#line 4348 "rlparse.cpp"
} break;
case 53: {
#line 365 "rlparse.kl"
 
		/* Add the label to the list and pass the factor up. */
		(&rhs[2]->user.factor_with_label)->factorWithAug->labels.prepend( Label((&rhs[0]->user.token)->loc, (&rhs[0]->user.token)->data) );
		(&redLel->user.factor_with_label)->factorWithAug = (&rhs[2]->user.factor_with_label)->factorWithAug; 
	

#line 4358 "rlparse.cpp"
} break;
case 54: {
#line 371 "rlparse.kl"

		(&redLel->user.factor_with_label)->factorWithAug = (&rhs[0]->user.factor_with_ep)->factorWithAug;
	

#line 4366 "rlparse.cpp"
} break;
case 55: {
#line 381 "rlparse.kl"
 
		/* Add the target to the list and return the factor object. */
		(&rhs[0]->user.factor_with_ep)->factorWithAug->epsilonLinks.append( EpsilonLink( (&rhs[1]->user.token)->loc, nameRef ) );
		(&redLel->user.factor_with_ep)->factorWithAug = (&rhs[0]->user.factor_with_ep)->factorWithAug; 
	

#line 4376 "rlparse.cpp"
} break;
case 56: {
#line 387 "rlparse.kl"

		(&redLel->user.factor_with_ep)->factorWithAug = (&rhs[0]->user.factor_with_aug)->factorWithAug;
	

#line 4384 "rlparse.cpp"
} break;
case 57: {
#line 397 "rlparse.kl"

		/* Append the action to the factorWithAug, record the refernce from 
		 * factorWithAug to the action and pass up the factorWithAug. */
		(&rhs[0]->user.factor_with_aug)->factorWithAug->actions.append( 
				ParserAction( (&rhs[1]->user.aug_type)->loc, (&rhs[1]->user.aug_type)->augType, 0, (&rhs[2]->user.action_ref)->action ) );
		(&redLel->user.factor_with_aug)->factorWithAug = (&rhs[0]->user.factor_with_aug)->factorWithAug;
	

#line 4396 "rlparse.cpp"
} break;
case 58: {
#line 405 "rlparse.kl"

		/* Append the named priority to the factorWithAug and pass it up. */
		(&rhs[0]->user.factor_with_aug)->factorWithAug->priorityAugs.append( 
				PriorityAug( (&rhs[1]->user.aug_type)->augType, pd->curDefPriorKey, (&rhs[2]->user.priority_aug)->priorityNum ) );
		(&redLel->user.factor_with_aug)->factorWithAug = (&rhs[0]->user.factor_with_aug)->factorWithAug;
	

#line 4407 "rlparse.cpp"
} break;
case 59: {
#line 412 "rlparse.kl"

		/* Append the priority using a default name. */
		(&rhs[0]->user.factor_with_aug)->factorWithAug->priorityAugs.append( 
				PriorityAug( (&rhs[1]->user.aug_type)->augType, (&rhs[3]->user.priority_name)->priorityName, (&rhs[5]->user.priority_aug)->priorityNum ) );
		(&redLel->user.factor_with_aug)->factorWithAug = (&rhs[0]->user.factor_with_aug)->factorWithAug;
	

#line 4418 "rlparse.cpp"
} break;
case 60: {
#line 419 "rlparse.kl"

		(&rhs[0]->user.factor_with_aug)->factorWithAug->conditions.append( ParserAction( (&rhs[1]->user.aug_type)->loc, 
				(&rhs[1]->user.aug_type)->augType, 0, (&rhs[2]->user.action_ref)->action ) );
		(&redLel->user.factor_with_aug)->factorWithAug = (&rhs[0]->user.factor_with_aug)->factorWithAug;
	

#line 4428 "rlparse.cpp"
} break;
case 61: {
#line 425 "rlparse.kl"

		/* Append the action, pass it up. */
		(&rhs[0]->user.factor_with_aug)->factorWithAug->actions.append( ParserAction( (&rhs[1]->user.aug_type)->loc, 
				(&rhs[1]->user.aug_type)->augType, 0, (&rhs[2]->user.action_ref)->action ) );
		(&redLel->user.factor_with_aug)->factorWithAug = (&rhs[0]->user.factor_with_aug)->factorWithAug;
	

#line 4439 "rlparse.cpp"
} break;
case 62: {
#line 432 "rlparse.kl"

		/* Append the action, pass it up. */
		(&rhs[0]->user.factor_with_aug)->factorWithAug->actions.append( ParserAction( (&rhs[1]->user.aug_type)->loc,
				(&rhs[1]->user.aug_type)->augType, 0, (&rhs[2]->user.action_ref)->action ) );
		(&redLel->user.factor_with_aug)->factorWithAug = (&rhs[0]->user.factor_with_aug)->factorWithAug;
	

#line 4450 "rlparse.cpp"
} break;
case 63: {
#line 439 "rlparse.kl"

		/* Append the action, pass it up. */
		(&rhs[0]->user.factor_with_aug)->factorWithAug->actions.append( ParserAction( (&rhs[1]->user.aug_type)->loc,
				(&rhs[1]->user.aug_type)->augType, 0, (&rhs[2]->user.action_ref)->action ) );
		(&redLel->user.factor_with_aug)->factorWithAug = (&rhs[0]->user.factor_with_aug)->factorWithAug;
	

#line 4461 "rlparse.cpp"
} break;
case 64: {
#line 446 "rlparse.kl"

		/* Append the action to the factorWithAug, record the refernce from 
		 * factorWithAug to the action and pass up the factorWithAug. */
		(&rhs[0]->user.factor_with_aug)->factorWithAug->actions.append( ParserAction( (&rhs[1]->user.aug_type)->loc,
				(&rhs[1]->user.aug_type)->augType, pd->curDefLocalErrKey, (&rhs[2]->user.action_ref)->action ) );
		(&redLel->user.factor_with_aug)->factorWithAug = (&rhs[0]->user.factor_with_aug)->factorWithAug;
	

#line 4473 "rlparse.cpp"
} break;
case 65: {
#line 454 "rlparse.kl"

		/* Append the action to the factorWithAug, record the refernce from 
		 * factorWithAug to the action and pass up the factorWithAug. */
		(&rhs[0]->user.factor_with_aug)->factorWithAug->actions.append( ParserAction( (&rhs[1]->user.aug_type)->loc, 
				(&rhs[1]->user.aug_type)->augType, pd->curDefLocalErrKey, (&rhs[2]->user.action_ref)->action ) );
		(&redLel->user.factor_with_aug)->factorWithAug = (&rhs[0]->user.factor_with_aug)->factorWithAug;
	

#line 4485 "rlparse.cpp"
} break;
case 66: {
#line 462 "rlparse.kl"

		/* Append the action to the factorWithAug, record the refernce from
		 * factorWithAug to the action and pass up the factorWithAug. */
		(&rhs[0]->user.factor_with_aug)->factorWithAug->actions.append( ParserAction( (&rhs[1]->user.aug_type)->loc,
				(&rhs[1]->user.aug_type)->augType, (&rhs[3]->user.local_err_name)->error_name, (&rhs[5]->user.action_ref)->action ) );
		(&redLel->user.factor_with_aug)->factorWithAug = (&rhs[0]->user.factor_with_aug)->factorWithAug;
	

#line 4497 "rlparse.cpp"
} break;
case 67: {
#line 470 "rlparse.kl"

		(&redLel->user.factor_with_aug)->factorWithAug = new FactorWithAug( (&rhs[0]->user.factor_with_rep)->factorWithRep );
	

#line 4505 "rlparse.cpp"
} break;
case 68: {
#line 483 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_finish; 

#line 4511 "rlparse.cpp"
} break;
case 69: {
#line 484 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_leave; 

#line 4517 "rlparse.cpp"
} break;
case 70: {
#line 485 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_all; 

#line 4523 "rlparse.cpp"
} break;
case 71: {
#line 486 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_start; 

#line 4529 "rlparse.cpp"
} break;
case 72: {
#line 491 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_start; 

#line 4535 "rlparse.cpp"
} break;
case 73: {
#line 492 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_start; 

#line 4541 "rlparse.cpp"
} break;
case 74: {
#line 493 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_all; 

#line 4547 "rlparse.cpp"
} break;
case 75: {
#line 494 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_all; 

#line 4553 "rlparse.cpp"
} break;
case 76: {
#line 495 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_leave; 

#line 4559 "rlparse.cpp"
} break;
case 77: {
#line 496 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_leave; 

#line 4565 "rlparse.cpp"
} break;
case 78: {
#line 497 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_all; 

#line 4571 "rlparse.cpp"
} break;
case 79: {
#line 506 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_start_to_state; 

#line 4577 "rlparse.cpp"
} break;
case 80: {
#line 508 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_start_to_state; 

#line 4583 "rlparse.cpp"
} break;
case 81: {
#line 511 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_not_start_to_state; 

#line 4589 "rlparse.cpp"
} break;
case 82: {
#line 513 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_not_start_to_state; 

#line 4595 "rlparse.cpp"
} break;
case 83: {
#line 516 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_all_to_state; 

#line 4601 "rlparse.cpp"
} break;
case 84: {
#line 518 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_all_to_state; 

#line 4607 "rlparse.cpp"
} break;
case 85: {
#line 521 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_final_to_state; 

#line 4613 "rlparse.cpp"
} break;
case 86: {
#line 523 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_final_to_state; 

#line 4619 "rlparse.cpp"
} break;
case 87: {
#line 526 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_not_final_to_state; 

#line 4625 "rlparse.cpp"
} break;
case 88: {
#line 528 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_not_final_to_state; 

#line 4631 "rlparse.cpp"
} break;
case 89: {
#line 531 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_middle_to_state; 

#line 4637 "rlparse.cpp"
} break;
case 90: {
#line 533 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_middle_to_state; 

#line 4643 "rlparse.cpp"
} break;
case 91: {
#line 542 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_start_from_state; 

#line 4649 "rlparse.cpp"
} break;
case 92: {
#line 544 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_start_from_state; 

#line 4655 "rlparse.cpp"
} break;
case 93: {
#line 547 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_not_start_from_state; 

#line 4661 "rlparse.cpp"
} break;
case 94: {
#line 549 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_not_start_from_state; 

#line 4667 "rlparse.cpp"
} break;
case 95: {
#line 552 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_all_from_state; 

#line 4673 "rlparse.cpp"
} break;
case 96: {
#line 554 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_all_from_state; 

#line 4679 "rlparse.cpp"
} break;
case 97: {
#line 557 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_final_from_state; 

#line 4685 "rlparse.cpp"
} break;
case 98: {
#line 559 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_final_from_state; 

#line 4691 "rlparse.cpp"
} break;
case 99: {
#line 562 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_not_final_from_state; 

#line 4697 "rlparse.cpp"
} break;
case 100: {
#line 564 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_not_final_from_state; 

#line 4703 "rlparse.cpp"
} break;
case 101: {
#line 567 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_middle_from_state; 

#line 4709 "rlparse.cpp"
} break;
case 102: {
#line 569 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_middle_from_state; 

#line 4715 "rlparse.cpp"
} break;
case 103: {
#line 578 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_start_eof; 

#line 4721 "rlparse.cpp"
} break;
case 104: {
#line 580 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_start_eof; 

#line 4727 "rlparse.cpp"
} break;
case 105: {
#line 583 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_not_start_eof; 

#line 4733 "rlparse.cpp"
} break;
case 106: {
#line 585 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_not_start_eof; 

#line 4739 "rlparse.cpp"
} break;
case 107: {
#line 588 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_all_eof; 

#line 4745 "rlparse.cpp"
} break;
case 108: {
#line 590 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_all_eof; 

#line 4751 "rlparse.cpp"
} break;
case 109: {
#line 593 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_final_eof; 

#line 4757 "rlparse.cpp"
} break;
case 110: {
#line 595 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_final_eof; 

#line 4763 "rlparse.cpp"
} break;
case 111: {
#line 598 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_not_final_eof; 

#line 4769 "rlparse.cpp"
} break;
case 112: {
#line 600 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_not_final_eof; 

#line 4775 "rlparse.cpp"
} break;
case 113: {
#line 603 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_middle_eof; 

#line 4781 "rlparse.cpp"
} break;
case 114: {
#line 605 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_middle_eof; 

#line 4787 "rlparse.cpp"
} break;
case 115: {
#line 614 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_start_gbl_error; 

#line 4793 "rlparse.cpp"
} break;
case 116: {
#line 616 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_start_gbl_error; 

#line 4799 "rlparse.cpp"
} break;
case 117: {
#line 619 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_not_start_gbl_error; 

#line 4805 "rlparse.cpp"
} break;
case 118: {
#line 621 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_not_start_gbl_error; 

#line 4811 "rlparse.cpp"
} break;
case 119: {
#line 624 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_all_gbl_error; 

#line 4817 "rlparse.cpp"
} break;
case 120: {
#line 626 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_all_gbl_error; 

#line 4823 "rlparse.cpp"
} break;
case 121: {
#line 629 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_final_gbl_error; 

#line 4829 "rlparse.cpp"
} break;
case 122: {
#line 631 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_final_gbl_error; 

#line 4835 "rlparse.cpp"
} break;
case 123: {
#line 634 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_not_final_gbl_error; 

#line 4841 "rlparse.cpp"
} break;
case 124: {
#line 636 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_not_final_gbl_error; 

#line 4847 "rlparse.cpp"
} break;
case 125: {
#line 639 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_middle_gbl_error; 

#line 4853 "rlparse.cpp"
} break;
case 126: {
#line 641 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_middle_gbl_error; 

#line 4859 "rlparse.cpp"
} break;
case 127: {
#line 651 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_start_local_error; 

#line 4865 "rlparse.cpp"
} break;
case 128: {
#line 653 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_start_local_error; 

#line 4871 "rlparse.cpp"
} break;
case 129: {
#line 656 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_not_start_local_error; 

#line 4877 "rlparse.cpp"
} break;
case 130: {
#line 658 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_not_start_local_error; 

#line 4883 "rlparse.cpp"
} break;
case 131: {
#line 661 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_all_local_error; 

#line 4889 "rlparse.cpp"
} break;
case 132: {
#line 663 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_all_local_error; 

#line 4895 "rlparse.cpp"
} break;
case 133: {
#line 666 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_final_local_error; 

#line 4901 "rlparse.cpp"
} break;
case 134: {
#line 668 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_final_local_error; 

#line 4907 "rlparse.cpp"
} break;
case 135: {
#line 671 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_not_final_local_error; 

#line 4913 "rlparse.cpp"
} break;
case 136: {
#line 673 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_not_final_local_error; 

#line 4919 "rlparse.cpp"
} break;
case 137: {
#line 676 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_middle_local_error; 

#line 4925 "rlparse.cpp"
} break;
case 138: {
#line 678 "rlparse.kl"
 (&redLel->user.aug_type)->loc = (&rhs[0]->user.token)->loc; (&redLel->user.aug_type)->augType = at_middle_local_error; 

#line 4931 "rlparse.cpp"
} break;
case 139: {
#line 691 "rlparse.kl"
 (&redLel->user.action_ref)->action = (&rhs[0]->user.action_ref)->action; 

#line 4937 "rlparse.cpp"
} break;
case 140: {
#line 692 "rlparse.kl"
 (&redLel->user.action_ref)->action = (&rhs[1]->user.action_ref)->action; 

#line 4943 "rlparse.cpp"
} break;
case 141: {
#line 693 "rlparse.kl"
 (&redLel->user.action_ref)->action = (&rhs[0]->user.action_ref)->action; 

#line 4949 "rlparse.cpp"
} break;
case 142: {
#line 698 "rlparse.kl"

		/* Set the name in the actionDict. */
		Action *action = pd->actionDict.find( (&rhs[0]->user.token)->data );
		if ( action != 0 ) {
			/* Pass up the action element */
			(&redLel->user.action_ref)->action = action;
		}
		else {
			/* Will recover by returning null as the action. */
			error((&rhs[0]->user.token)->loc) << "action lookup of \"" << (&rhs[0]->user.token)->data << "\" failed" << endl;
			(&redLel->user.action_ref)->action = 0;
		}
	

#line 4967 "rlparse.cpp"
} break;
case 143: {
#line 715 "rlparse.kl"

		/* Create the action, add it to the list and pass up. */
		Action *newAction = new Action( (&rhs[0]->user.token)->loc, 0, (&rhs[1]->user.inline_list)->inlineList, pd->nextCondId++ );
		pd->actionList.append( newAction );
		(&redLel->user.action_ref)->action = newAction;
	

#line 4978 "rlparse.cpp"
} break;
case 144: {
#line 730 "rlparse.kl"

		// Lookup/create the priority key.
		PriorDictEl *priorDictEl;
		if ( pd->priorDict.insert( (&rhs[0]->user.token)->data, pd->nextPriorKey, &priorDictEl ) )
			pd->nextPriorKey += 1;

		// Use the inserted/found priority key.
		(&redLel->user.priority_name)->priorityName = priorDictEl->value;
	

#line 4992 "rlparse.cpp"
} break;
case 145: {
#line 747 "rlparse.kl"

		// Convert the priority number to a long. Check for overflow.
		errno = 0;
		//cerr << "PRIOR AUG: " << $1->token.data << endl;
		long aug = strtol( (&rhs[0]->user.token_type)->token.data, 0, 10 );
		if ( errno == ERANGE && aug == LONG_MAX ) {
			/* Priority number too large. Recover by setting the priority to 0. */
			error((&rhs[0]->user.token_type)->token.loc) << "priority number " << (&rhs[0]->user.token_type)->token.data << 
					" overflows" << endl;
			(&redLel->user.priority_aug)->priorityNum = 0;
		}
		else if ( errno == ERANGE && aug == LONG_MIN ) {
			/* Priority number too large in the neg. Recover by using 0. */
			error((&rhs[0]->user.token_type)->token.loc) << "priority number " << (&rhs[0]->user.token_type)->token.data << 
					" underflows" << endl;
			(&redLel->user.priority_aug)->priorityNum = 0;
		}
		else {
			/* No overflow or underflow. */
			(&redLel->user.priority_aug)->priorityNum = aug;
		}
	

#line 5019 "rlparse.cpp"
} break;
case 146: {
#line 773 "rlparse.kl"

		(&redLel->user.token_type)->token = *(&rhs[0]->user.token);
	

#line 5027 "rlparse.cpp"
} break;
case 147: {
#line 777 "rlparse.kl"

		(&redLel->user.token_type)->token.set( "+", 1 );
		(&redLel->user.token_type)->token.loc = (&rhs[0]->user.token)->loc;
		(&redLel->user.token_type)->token.append( *(&rhs[1]->user.token) );
	

#line 5037 "rlparse.cpp"
} break;
case 148: {
#line 783 "rlparse.kl"

		(&redLel->user.token_type)->token.set( "-", 1 );
		(&redLel->user.token_type)->token.loc = (&rhs[0]->user.token)->loc;
		(&redLel->user.token_type)->token.append( *(&rhs[1]->user.token) );
	

#line 5047 "rlparse.cpp"
} break;
case 149: {
#line 795 "rlparse.kl"

		/* Lookup/create the priority key. */
		LocalErrDictEl *localErrDictEl;
		if ( pd->localErrDict.insert( (&rhs[0]->user.token)->data, pd->nextLocalErrKey, &localErrDictEl ) )
			pd->nextLocalErrKey += 1;

		/* Use the inserted/found priority key. */
		(&redLel->user.local_err_name)->error_name = localErrDictEl->value;
	

#line 5061 "rlparse.cpp"
} break;
case 150: {
#line 816 "rlparse.kl"

		(&redLel->user.factor_with_rep)->factorWithRep = new FactorWithRep( (&rhs[1]->user.token)->loc, (&rhs[0]->user.factor_with_rep)->factorWithRep, 
				0, 0, FactorWithRep::StarType );
	

#line 5070 "rlparse.cpp"
} break;
case 151: {
#line 821 "rlparse.kl"

		(&redLel->user.factor_with_rep)->factorWithRep = new FactorWithRep( (&rhs[1]->user.token)->loc, (&rhs[0]->user.factor_with_rep)->factorWithRep, 
				0, 0, FactorWithRep::StarStarType );
	

#line 5079 "rlparse.cpp"
} break;
case 152: {
#line 826 "rlparse.kl"

		(&redLel->user.factor_with_rep)->factorWithRep = new FactorWithRep( (&rhs[1]->user.token)->loc, (&rhs[0]->user.factor_with_rep)->factorWithRep, 
				0, 0, FactorWithRep::OptionalType );
	

#line 5088 "rlparse.cpp"
} break;
case 153: {
#line 831 "rlparse.kl"

		(&redLel->user.factor_with_rep)->factorWithRep = new FactorWithRep( (&rhs[1]->user.token)->loc, (&rhs[0]->user.factor_with_rep)->factorWithRep, 
				0, 0, FactorWithRep::PlusType );
	

#line 5097 "rlparse.cpp"
} break;
case 154: {
#line 836 "rlparse.kl"

		(&redLel->user.factor_with_rep)->factorWithRep = new FactorWithRep( (&rhs[1]->user.token)->loc, (&rhs[0]->user.factor_with_rep)->factorWithRep, 
				(&rhs[2]->user.factor_rep_num)->rep, 0, FactorWithRep::ExactType );
	

#line 5106 "rlparse.cpp"
} break;
case 155: {
#line 841 "rlparse.kl"

		(&redLel->user.factor_with_rep)->factorWithRep = new FactorWithRep( (&rhs[1]->user.token)->loc, (&rhs[0]->user.factor_with_rep)->factorWithRep, 
				0, (&rhs[3]->user.factor_rep_num)->rep, FactorWithRep::MaxType );
	

#line 5115 "rlparse.cpp"
} break;
case 156: {
#line 846 "rlparse.kl"

		(&redLel->user.factor_with_rep)->factorWithRep = new FactorWithRep( (&rhs[1]->user.token)->loc, (&rhs[0]->user.factor_with_rep)->factorWithRep,
				(&rhs[2]->user.factor_rep_num)->rep, 0, FactorWithRep::MinType );
	

#line 5124 "rlparse.cpp"
} break;
case 157: {
#line 851 "rlparse.kl"

		(&redLel->user.factor_with_rep)->factorWithRep = new FactorWithRep( (&rhs[1]->user.token)->loc, (&rhs[0]->user.factor_with_rep)->factorWithRep, 
				(&rhs[2]->user.factor_rep_num)->rep, (&rhs[4]->user.factor_rep_num)->rep, FactorWithRep::RangeType );
	

#line 5133 "rlparse.cpp"
} break;
case 158: {
#line 856 "rlparse.kl"

		(&redLel->user.factor_with_rep)->factorWithRep = new FactorWithRep( (&rhs[0]->user.factor_with_neg)->factorWithNeg );
	

#line 5141 "rlparse.cpp"
} break;
case 159: {
#line 866 "rlparse.kl"

		// Convert the priority number to a long. Check for overflow.
		errno = 0;
		long rep = strtol( (&rhs[0]->user.token)->data, 0, 10 );
		if ( errno == ERANGE && rep == LONG_MAX ) {
			// Repetition too large. Recover by returing repetition 1. */
			error((&rhs[0]->user.token)->loc) << "repetition number " << (&rhs[0]->user.token)->data << " overflows" << endl;
			(&redLel->user.factor_rep_num)->rep = 1;
		}
		else {
			// Cannot be negative, so no overflow.
			(&redLel->user.factor_rep_num)->rep = rep;
 		}
	

#line 5160 "rlparse.cpp"
} break;
case 160: {
#line 892 "rlparse.kl"

		(&redLel->user.factor_with_neg)->factorWithNeg = new FactorWithNeg( (&rhs[0]->user.token)->loc,
				(&rhs[1]->user.factor_with_neg)->factorWithNeg, FactorWithNeg::NegateType );
	

#line 5169 "rlparse.cpp"
} break;
case 161: {
#line 897 "rlparse.kl"

		(&redLel->user.factor_with_neg)->factorWithNeg = new FactorWithNeg( (&rhs[0]->user.token)->loc,
				(&rhs[1]->user.factor_with_neg)->factorWithNeg, FactorWithNeg::CharNegateType );
	

#line 5178 "rlparse.cpp"
} break;
case 162: {
#line 902 "rlparse.kl"

		(&redLel->user.factor_with_neg)->factorWithNeg = new FactorWithNeg( (&rhs[0]->user.factor)->factor );
	

#line 5186 "rlparse.cpp"
} break;
case 163: {
#line 912 "rlparse.kl"

		/* Create a new factor node going to a concat literal. */
		(&redLel->user.factor)->factor = new Factor( new Literal( *(&rhs[0]->user.token), Literal::LitString ) );
	

#line 5195 "rlparse.cpp"
} break;
case 164: {
#line 917 "rlparse.kl"

		/* Create a new factor node going to a literal number. */
		(&redLel->user.factor)->factor = new Factor( new Literal( (&rhs[0]->user.token_type)->token, Literal::Number ) );
	

#line 5204 "rlparse.cpp"
} break;
case 165: {
#line 922 "rlparse.kl"

		/* Find the named graph. */
		GraphDictEl *gdNode = pd->graphDict.find( (&rhs[0]->user.token)->data );
		if ( gdNode == 0 ) {
			/* Recover by returning null as the factor node. */
			error((&rhs[0]->user.token)->loc) << "graph lookup of \"" << (&rhs[0]->user.token)->data << "\" failed" << endl;
			(&redLel->user.factor)->factor = 0;
		}
		else if ( gdNode->isInstance ) {
			/* Recover by retuning null as the factor node. */
			error((&rhs[0]->user.token)->loc) << "references to graph instantiations not allowed "
					"in expressions" << endl;
			(&redLel->user.factor)->factor = 0;
		}
		else {
			/* Create a factor node that is a lookup of an expression. */
			(&redLel->user.factor)->factor = new Factor( (&rhs[0]->user.token)->loc, gdNode->value );
		}
	

#line 5228 "rlparse.cpp"
} break;
case 166: {
#line 942 "rlparse.kl"

		/* Create a new factor node going to an OR expression. */
		(&redLel->user.factor)->factor = new Factor( new ReItem( (&rhs[0]->user.token)->loc, (&rhs[1]->user.regular_expr_or_data)->reOrBlock, ReItem::OrBlock ) );
	

#line 5237 "rlparse.cpp"
} break;
case 167: {
#line 947 "rlparse.kl"

		/* Create a new factor node going to a negated OR expression. */
		(&redLel->user.factor)->factor = new Factor( new ReItem( (&rhs[0]->user.token)->loc, (&rhs[1]->user.regular_expr_or_data)->reOrBlock, ReItem::NegOrBlock ) );
	

#line 5246 "rlparse.cpp"
} break;
case 168: {
#line 952 "rlparse.kl"

		if ( (&rhs[2]->user.token)->length > 1 ) {
			for ( char *p = (&rhs[2]->user.token)->data; *p != 0; p++ ) {
				if ( *p == 'i' )
					(&rhs[1]->user.regular_expr)->regExpr->caseInsensitive = true;
			}
		}

		/* Create a new factor node going to a regular exp. */
		(&redLel->user.factor)->factor = new Factor( (&rhs[1]->user.regular_expr)->regExpr );
	

#line 5262 "rlparse.cpp"
} break;
case 169: {
#line 964 "rlparse.kl"

		/* Create a new factor node going to a range. */
		(&redLel->user.factor)->factor = new Factor( new Range( (&rhs[0]->user.range_lit)->literal, (&rhs[2]->user.range_lit)->literal ) );
	

#line 5271 "rlparse.cpp"
} break;
case 170: {
#line 969 "rlparse.kl"

		/* Create a new factor going to a parenthesized join. */
		(&redLel->user.factor)->factor = new Factor( (&rhs[1]->user.join)->join );
	

#line 5280 "rlparse.cpp"
} break;
case 171: {
#line 981 "rlparse.kl"

		/* Range literas must have only one char. We restrict this in the parse tree. */
		(&redLel->user.range_lit)->literal = new Literal( *(&rhs[0]->user.token), Literal::LitString );
	

#line 5289 "rlparse.cpp"
} break;
case 172: {
#line 986 "rlparse.kl"

		/* Create a new literal number. */
		(&redLel->user.range_lit)->literal = new Literal( (&rhs[0]->user.token_type)->token, Literal::Number );
	

#line 5298 "rlparse.cpp"
} break;
case 173: {
#line 995 "rlparse.kl"
 
		(&redLel->user.token_type)->token = *(&rhs[0]->user.token);
	

#line 5306 "rlparse.cpp"
} break;
case 174: {
#line 999 "rlparse.kl"
 
		(&redLel->user.token_type)->token.set( "-", 1 );
		(&redLel->user.token_type)->token.loc = (&rhs[0]->user.token)->loc;
		(&redLel->user.token_type)->token.append( *(&rhs[1]->user.token) );
	

#line 5316 "rlparse.cpp"
} break;
case 175: {
#line 1005 "rlparse.kl"
 
		(&redLel->user.token_type)->token = *(&rhs[0]->user.token);
	

#line 5324 "rlparse.cpp"
} break;
case 176: {
#line 1020 "rlparse.kl"

		/* An optimization to lessen the tree size. If a non-starred char is
		 * directly under the left side on the right and the right side is
		 * another non-starred char then paste them together and return the
		 * left side. Otherwise just put the two under a new reg exp node. */
		if ( (&rhs[1]->user.regular_expr_item)->reItem->type == ReItem::Data && !(&rhs[1]->user.regular_expr_item)->reItem->star &&
			(&rhs[0]->user.regular_expr)->regExpr->type == RegExpr::RecurseItem &&
			(&rhs[0]->user.regular_expr)->regExpr->item->type == ReItem::Data && !(&rhs[0]->user.regular_expr)->regExpr->item->star )
		{
			/* Append the right side to the right side of the left and toss the
			 * right side. */
			(&rhs[0]->user.regular_expr)->regExpr->item->token.append( (&rhs[1]->user.regular_expr_item)->reItem->token );
			delete (&rhs[1]->user.regular_expr_item)->reItem;
			(&redLel->user.regular_expr)->regExpr = (&rhs[0]->user.regular_expr)->regExpr;
		}
		else {
			(&redLel->user.regular_expr)->regExpr = new RegExpr( (&rhs[0]->user.regular_expr)->regExpr, (&rhs[1]->user.regular_expr_item)->reItem );
		}
	

#line 5348 "rlparse.cpp"
} break;
case 177: {
#line 1040 "rlparse.kl"

		/* Can't optimize the tree. */
		(&redLel->user.regular_expr)->regExpr = new RegExpr();
	

#line 5357 "rlparse.cpp"
} break;
case 178: {
#line 1052 "rlparse.kl"

		(&rhs[0]->user.regular_expr_char)->reItem->star = true;
		(&redLel->user.regular_expr_item)->reItem = (&rhs[0]->user.regular_expr_char)->reItem;
	

#line 5366 "rlparse.cpp"
} break;
case 179: {
#line 1057 "rlparse.kl"

		(&redLel->user.regular_expr_item)->reItem = (&rhs[0]->user.regular_expr_char)->reItem;
	

#line 5374 "rlparse.cpp"
} break;
case 180: {
#line 1069 "rlparse.kl"

		(&redLel->user.regular_expr_char)->reItem = new ReItem( (&rhs[0]->user.token)->loc, (&rhs[1]->user.regular_expr_or_data)->reOrBlock, ReItem::OrBlock );
	

#line 5382 "rlparse.cpp"
} break;
case 181: {
#line 1073 "rlparse.kl"

		(&redLel->user.regular_expr_char)->reItem = new ReItem( (&rhs[0]->user.token)->loc, (&rhs[1]->user.regular_expr_or_data)->reOrBlock, ReItem::NegOrBlock );
	

#line 5390 "rlparse.cpp"
} break;
case 182: {
#line 1077 "rlparse.kl"

		(&redLel->user.regular_expr_char)->reItem = new ReItem( (&rhs[0]->user.token)->loc, ReItem::Dot );
	

#line 5398 "rlparse.cpp"
} break;
case 183: {
#line 1081 "rlparse.kl"

		(&redLel->user.regular_expr_char)->reItem = new ReItem( (&rhs[0]->user.token)->loc, *(&rhs[0]->user.token) );
	

#line 5406 "rlparse.cpp"
} break;
case 184: {
#line 1093 "rlparse.kl"

		/* An optimization to lessen the tree size. If an or char is directly
		 * under the left side on the right and the right side is another or
		 * char then paste them together and return the left side. Otherwise
		 * just put the two under a new or data node. */
		if ( (&rhs[1]->user.regular_expr_or_char)->reOrItem->type == ReOrItem::Data &&
				(&rhs[0]->user.regular_expr_or_data)->reOrBlock->type == ReOrBlock::RecurseItem &&
				(&rhs[0]->user.regular_expr_or_data)->reOrBlock->item->type == ReOrItem::Data )
		{
			/* Append the right side to right side of the left and toss the
			 * right side. */
			(&rhs[0]->user.regular_expr_or_data)->reOrBlock->item->token.append( (&rhs[1]->user.regular_expr_or_char)->reOrItem->token );
			delete (&rhs[1]->user.regular_expr_or_char)->reOrItem;
			(&redLel->user.regular_expr_or_data)->reOrBlock = (&rhs[0]->user.regular_expr_or_data)->reOrBlock;
		}
		else {
			/* Can't optimize, put the left and right under a new node. */
			(&redLel->user.regular_expr_or_data)->reOrBlock = new ReOrBlock( (&rhs[0]->user.regular_expr_or_data)->reOrBlock, (&rhs[1]->user.regular_expr_or_char)->reOrItem );
		}
	

#line 5431 "rlparse.cpp"
} break;
case 185: {
#line 1114 "rlparse.kl"

		(&redLel->user.regular_expr_or_data)->reOrBlock = new ReOrBlock();
	

#line 5439 "rlparse.cpp"
} break;
case 186: {
#line 1126 "rlparse.kl"

		(&redLel->user.regular_expr_or_char)->reOrItem = new ReOrItem( (&rhs[0]->user.token)->loc, *(&rhs[0]->user.token) );
	

#line 5447 "rlparse.cpp"
} break;
case 187: {
#line 1130 "rlparse.kl"

		(&redLel->user.regular_expr_or_char)->reOrItem = new ReOrItem( (&rhs[1]->user.token)->loc, (&rhs[0]->user.token)->data[0], (&rhs[2]->user.token)->data[0] );
	

#line 5455 "rlparse.cpp"
} break;
case 188: {
#line 1147 "rlparse.kl"

		/* Append the item to the list, return the list. */
		(&redLel->user.inline_list)->inlineList = (&rhs[0]->user.inline_list)->inlineList;
		(&redLel->user.inline_list)->inlineList->append( (&rhs[1]->user.inline_item)->inlineItem );
	

#line 5465 "rlparse.cpp"
} break;
case 189: {
#line 1154 "rlparse.kl"

		/* Start with empty list. */
		(&redLel->user.inline_list)->inlineList = new InlineList;
	

#line 5474 "rlparse.cpp"
} break;
case 190: {
#line 1169 "rlparse.kl"

		(&redLel->user.inline_item)->inlineItem = new InlineItem( (&rhs[0]->user.token_type)->token.loc, (&rhs[0]->user.token_type)->token.data, InlineItem::Text );
	

#line 5482 "rlparse.cpp"
} break;
case 191: {
#line 1175 "rlparse.kl"

		(&redLel->user.inline_item)->inlineItem = new InlineItem( (&rhs[0]->user.token_type)->token.loc, (&rhs[0]->user.token_type)->token.data, InlineItem::Text );
	

#line 5490 "rlparse.cpp"
} break;
case 192: {
#line 1181 "rlparse.kl"

		/* Pass the inline item up. */
		(&redLel->user.inline_item)->inlineItem = (&rhs[0]->user.inline_item)->inlineItem;
	

#line 5499 "rlparse.cpp"
} break;
case 193: {
#line 1188 "rlparse.kl"
 (&redLel->user.token_type)->token = *(&rhs[0]->user.token); 

#line 5505 "rlparse.cpp"
} break;
case 194: {
#line 1189 "rlparse.kl"
 (&redLel->user.token_type)->token = *(&rhs[0]->user.token); 

#line 5511 "rlparse.cpp"
} break;
case 195: {
#line 1190 "rlparse.kl"
 (&redLel->user.token_type)->token = *(&rhs[0]->user.token); 

#line 5517 "rlparse.cpp"
} break;
case 196: {
#line 1191 "rlparse.kl"
 (&redLel->user.token_type)->token = *(&rhs[0]->user.token); 

#line 5523 "rlparse.cpp"
} break;
case 197: {
#line 1192 "rlparse.kl"
 (&redLel->user.token_type)->token = *(&rhs[0]->user.token); 

#line 5529 "rlparse.cpp"
} break;
case 198: {
#line 1193 "rlparse.kl"
 (&redLel->user.token_type)->token = *(&rhs[0]->user.token); 

#line 5535 "rlparse.cpp"
} break;
case 199: {
#line 1197 "rlparse.kl"

		/* Pass up interpreted items of inline expressions. */
		(&redLel->user.inline_item)->inlineItem = (&rhs[0]->user.inline_item)->inlineItem;
	

#line 5544 "rlparse.cpp"
} break;
case 200: {
#line 1202 "rlparse.kl"

		(&redLel->user.inline_item)->inlineItem = new InlineItem( (&rhs[0]->user.token)->loc, InlineItem::Hold );
	

#line 5552 "rlparse.cpp"
} break;
case 201: {
#line 1206 "rlparse.kl"

		(&redLel->user.inline_item)->inlineItem = new InlineItem( (&rhs[0]->user.token)->loc, InlineItem::Exec );
		(&redLel->user.inline_item)->inlineItem->children = (&rhs[1]->user.inline_list)->inlineList;
	

#line 5561 "rlparse.cpp"
} break;
case 202: {
#line 1211 "rlparse.kl"
 
		(&redLel->user.inline_item)->inlineItem = new InlineItem( (&rhs[0]->user.token)->loc, 
				new NameRef(nameRef), InlineItem::Goto );
	

#line 5570 "rlparse.cpp"
} break;
case 203: {
#line 1216 "rlparse.kl"

		(&redLel->user.inline_item)->inlineItem = new InlineItem( (&rhs[0]->user.token)->loc, InlineItem::GotoExpr );
		(&redLel->user.inline_item)->inlineItem->children = (&rhs[2]->user.inline_list)->inlineList;
	

#line 5579 "rlparse.cpp"
} break;
case 204: {
#line 1221 "rlparse.kl"
 
		(&redLel->user.inline_item)->inlineItem = new InlineItem( (&rhs[0]->user.token)->loc, new NameRef(nameRef), InlineItem::Next );
	

#line 5587 "rlparse.cpp"
} break;
case 205: {
#line 1225 "rlparse.kl"

		(&redLel->user.inline_item)->inlineItem = new InlineItem( (&rhs[0]->user.token)->loc, InlineItem::NextExpr );
		(&redLel->user.inline_item)->inlineItem->children = (&rhs[2]->user.inline_list)->inlineList;
	

#line 5596 "rlparse.cpp"
} break;
case 206: {
#line 1230 "rlparse.kl"

		(&redLel->user.inline_item)->inlineItem = new InlineItem( (&rhs[0]->user.token)->loc, new NameRef(nameRef), InlineItem::Call );
	

#line 5604 "rlparse.cpp"
} break;
case 207: {
#line 1234 "rlparse.kl"

		(&redLel->user.inline_item)->inlineItem = new InlineItem( (&rhs[0]->user.token)->loc, InlineItem::CallExpr );
		(&redLel->user.inline_item)->inlineItem->children = (&rhs[2]->user.inline_list)->inlineList;
	

#line 5613 "rlparse.cpp"
} break;
case 208: {
#line 1239 "rlparse.kl"

		(&redLel->user.inline_item)->inlineItem = new InlineItem( (&rhs[0]->user.token)->loc, InlineItem::Ret );
	

#line 5621 "rlparse.cpp"
} break;
case 209: {
#line 1243 "rlparse.kl"

		(&redLel->user.inline_item)->inlineItem = new InlineItem( (&rhs[0]->user.token)->loc, InlineItem::Break );
	

#line 5629 "rlparse.cpp"
} break;
case 210: {
#line 1251 "rlparse.kl"

		(&redLel->user.inline_list)->inlineList = (&rhs[0]->user.inline_list)->inlineList;
		(&redLel->user.inline_list)->inlineList->append( (&rhs[1]->user.inline_item)->inlineItem );
	

#line 5638 "rlparse.cpp"
} break;
case 211: {
#line 1256 "rlparse.kl"

		/* Init the list used for this expr. */
		(&redLel->user.inline_list)->inlineList = new InlineList;
	

#line 5647 "rlparse.cpp"
} break;
case 212: {
#line 1265 "rlparse.kl"

		/* Return a text segment. */
		(&redLel->user.inline_item)->inlineItem = new InlineItem( (&rhs[0]->user.token_type)->token.loc, (&rhs[0]->user.token_type)->token.data, InlineItem::Text );
	

#line 5656 "rlparse.cpp"
} break;
case 213: {
#line 1271 "rlparse.kl"

		/* Return a text segment, must heap alloc the text. */
		(&redLel->user.inline_item)->inlineItem = new InlineItem( (&rhs[0]->user.token_type)->token.loc, (&rhs[0]->user.token_type)->token.data, InlineItem::Text );
	

#line 5665 "rlparse.cpp"
} break;
case 214: {
#line 1277 "rlparse.kl"

		/* Pass the inline item up. */
		(&redLel->user.inline_item)->inlineItem = (&rhs[0]->user.inline_item)->inlineItem;
	

#line 5674 "rlparse.cpp"
} break;
case 227: {
#line 1307 "rlparse.kl"

		(&redLel->user.inline_item)->inlineItem = new InlineItem( (&rhs[0]->user.token)->loc, InlineItem::PChar );
	

#line 5682 "rlparse.cpp"
} break;
case 228: {
#line 1312 "rlparse.kl"

		(&redLel->user.inline_item)->inlineItem = new InlineItem( (&rhs[0]->user.token)->loc, InlineItem::Char );
	

#line 5690 "rlparse.cpp"
} break;
case 229: {
#line 1317 "rlparse.kl"

		(&redLel->user.inline_item)->inlineItem = new InlineItem( (&rhs[0]->user.token)->loc, InlineItem::Curs );
	

#line 5698 "rlparse.cpp"
} break;
case 230: {
#line 1322 "rlparse.kl"

		(&redLel->user.inline_item)->inlineItem = new InlineItem( (&rhs[0]->user.token)->loc, InlineItem::Targs );
	

#line 5706 "rlparse.cpp"
} break;
case 231: {
#line 1327 "rlparse.kl"

		(&redLel->user.inline_item)->inlineItem = new InlineItem( (&rhs[0]->user.token)->loc, 
			new NameRef(nameRef), InlineItem::Entry );
	

#line 5715 "rlparse.cpp"
} break;
case 233: {
#line 1338 "rlparse.kl"

		nameRef.empty();
	

#line 5723 "rlparse.cpp"
} break;
case 235: {
#line 1348 "rlparse.kl"

		/* Insert an initial null pointer val to indicate the existence of the
		 * initial name separator. */
		nameRef.setAs( 0 );
	

#line 5733 "rlparse.cpp"
} break;
case 236: {
#line 1354 "rlparse.kl"

		nameRef.empty();
	

#line 5741 "rlparse.cpp"
} break;
case 237: {
#line 1361 "rlparse.kl"

		nameRef.append( (&rhs[2]->user.token)->data );
	

#line 5749 "rlparse.cpp"
} break;
case 238: {
#line 1366 "rlparse.kl"

		nameRef.append( (&rhs[0]->user.token)->data );
	

#line 5757 "rlparse.cpp"
} break;
}
	}
}

					if ( lel->child != 0 ) {
						struct Parser_LangEl *first = lel->child;
						struct Parser_LangEl *child = lel->child;
						numNodes -= 1;
						lel->child = 0;
						while ( child->next != 0 ) {
							child = child->next;
							numNodes -= 1;
						}
						child->next = pool;
						pool = first;
					}
				}

hit_final:
				if ( sp > 0 ) {
					/* Figure out which place to return to. */
					if ( cmStack[sp-1]->next == lel ) {
						lel = cmStack[--sp];
						goto final_reverse;
					}
					else {
						lel = cmStack[--sp];
						goto final_upwards;
					}
				}

				lastFinal = lel;
				free( cmStack );
			}
		}
	}

	if ( *action & 0x2 ) {
		int fssRed = *action >> 2;
		int reduction = Parser_fssProdIdIndex[fssRed];
		struct Parser_LangEl *redLel;
		if ( pool == 0 ) {
			if ( freshPos == 8128 ) {
				freshEl = (struct Parser_LangEl*) malloc(
						sizeof(struct Parser_LangEl)*8128);
				#ifdef LOG_ACTIONS
				cerr << "allocating 8128 LangEls" << endl;
				#endif
				freshPos = 0;
			}
			redLel = freshEl + freshPos++;
		}
		else {
			redLel = pool;
			pool = pool->next;
		}
		numNodes += 1;
		redLel->type = Parser_prodLhsIds[reduction];
		redLel->reduction = reduction;
		redLel->child = 0;
		redLel->next = 0;
		redLel->retry = (lel->retry << 16);
		lel->retry &= 0xffff0000;

		rhsLen = Parser_fssProdLengths[fssRed];
		if ( rhsLen > 0 ) {
			int r;
			for ( r = rhsLen-1; r > 0; r-- ) {
				rhs[r] = stackTop;
				stackTop = stackTop->next;
			}
			rhs[0] = stackTop;
			stackTop = stackTop->next;
			rhs[0]->next = 0;
		}
switch ( reduction ) {
case 215: {
#line 1284 "rlparse.kl"
 (&redLel->user.token_type)->token = *(&rhs[0]->user.token); 

#line 5839 "rlparse.cpp"
} break;
case 216: {
#line 1285 "rlparse.kl"
 (&redLel->user.token_type)->token = *(&rhs[0]->user.token); 

#line 5845 "rlparse.cpp"
} break;
case 217: {
#line 1286 "rlparse.kl"
 (&redLel->user.token_type)->token = *(&rhs[0]->user.token); 

#line 5851 "rlparse.cpp"
} break;
case 218: {
#line 1287 "rlparse.kl"
 (&redLel->user.token_type)->token = *(&rhs[0]->user.token); 

#line 5857 "rlparse.cpp"
} break;
case 219: {
#line 1288 "rlparse.kl"
 (&redLel->user.token_type)->token = *(&rhs[0]->user.token); 

#line 5863 "rlparse.cpp"
} break;
case 220: {
#line 1289 "rlparse.kl"
 (&redLel->user.token_type)->token = *(&rhs[0]->user.token); 

#line 5869 "rlparse.cpp"
} break;
case 221: {
#line 1290 "rlparse.kl"
 (&redLel->user.token_type)->token = *(&rhs[0]->user.token); 

#line 5875 "rlparse.cpp"
} break;
case 222: {
#line 1297 "rlparse.kl"
 (&redLel->user.token_type)->token = *(&rhs[0]->user.token); 

#line 5881 "rlparse.cpp"
} break;
case 223: {
#line 1298 "rlparse.kl"
 (&redLel->user.token_type)->token = *(&rhs[0]->user.token); 

#line 5887 "rlparse.cpp"
} break;
case 224: {
#line 1299 "rlparse.kl"
 (&redLel->user.token_type)->token = *(&rhs[0]->user.token); 

#line 5893 "rlparse.cpp"
} break;
case 225: {
#line 1300 "rlparse.kl"
 (&redLel->user.token_type)->token = *(&rhs[0]->user.token); 

#line 5899 "rlparse.cpp"
} break;
case 226: {
#line 1301 "rlparse.kl"
 (&redLel->user.token_type)->token = *(&rhs[0]->user.token); 

#line 5905 "rlparse.cpp"
} break;
}
		#ifdef LOG_ACTIONS
		cerr << "reduced: "
				<< Parser_prodNames[reduction]
				<< " rhsLen: " << rhsLen;
		#endif
		if ( action[1] == 0 )
			redLel->retry = 0;
		else {
			redLel->retry += 0x10000;
			numRetry += 1;
			#ifdef LOG_ACTIONS
			cerr << " retry: " << redLel;
			#endif
		}

		#ifdef LOG_ACTIONS
		cerr << endl;
		#endif

		if ( rhsLen == 0 ) {
			redLel->file = lel->file;
			redLel->line = lel->line;
			targState = curs;
		}
		else {
			redLel->child = rhs[rhsLen-1];
			redLel->file = rhs[0]->file;
			redLel->line = rhs[0]->line;
			targState = rhs[0]->state;
		}

		if ( induceReject ) {
			#ifdef LOG_ACTIONS
			cerr << "error induced during reduction of " <<
					Parser_lelNames[redLel->type] << endl;
			#endif
			redLel->state = curs;
			redLel->next = stackTop;
			stackTop = redLel;
			curs = targState;
			goto parseError;
		}
		else {
			redLel->next = input;
			input = redLel;
		}
	}


	curs = targState;
	goto again;

parseError:
	#ifdef LOG_BACKTRACK
	cerr << "hit error" << endl;
	#endif
	if ( numRetry > 0 ) {
		while ( 1 ) {
			struct Parser_LangEl *redLel = stackTop;
			if ( stackTop->type < 225 ) {
				#ifdef LOG_BACKTRACK
				cerr << "backing up over terminal: " <<
						Parser_lelNames[stackTop->type] << endl;
				#endif
				stackTop = stackTop->next;
				redLel->next = input;
				input = redLel;
			}
			else {
				#ifdef LOG_BACKTRACK
				cerr << "backing up over non-terminal: " <<
						Parser_lelNames[stackTop->type] << endl;
				#endif
				stackTop = stackTop->next;
				struct Parser_LangEl *first = redLel->child;
				if ( first == 0 )
					rhsLen = 0;
				else {
					rhsLen = 1;
					while ( first->next != 0 ) {
						first = first->next;
						rhsLen += 1;
					}
					first->next = stackTop;
					stackTop = redLel->child;

					struct Parser_LangEl *rhsEl = stackTop;
					int p = rhsLen;
					while ( p > 0 ) {
						rhs[--p] = rhsEl;
						rhsEl = rhsEl->next;
					}
				}
				redLel->next = pool;
				pool = redLel;
				numNodes -= 1;
			}

			if ( redLel->retry > 0 ) {
				#ifdef LOG_BACKTRACK
				cerr << "found retry targ: " << redLel << endl;
				#endif
				numRetry -= 1;
				#ifdef LOG_BACKTRACK
				cerr << "found retry: " << redLel << endl;
				#endif
				if ( redLel->retry & 0x0000ffff )
					curs = input->state;
				else {
					input->retry = redLel->retry >> 16;
					if ( stackTop->state < 0 )
						curs = Parser_startState;
					else {
						curs = Parser_targs[(int)Parser_indicies[Parser_offsets[stackTop->state] + (stackTop->type - Parser_keys[stackTop->state<<1])]];
					}
				}
				goto again;
			}
		}
	}
	curs = -1;
	errCount += 1;
_out: {}
#line 1385 "rlparse.kl"
	return errCount == 0 ? 0 : -1;
}

void Parser::tryMachineDef( InputLoc &loc, char *name, 
		JoinOrLm *joinOrLm, bool isInstance )
{
	GraphDictEl *newEl = pd->graphDict.insert( name );
	if ( newEl != 0 ) {
		/* New element in the dict, all good. */
		newEl->value = new VarDef( name, joinOrLm );
		newEl->isInstance = isInstance;
		newEl->loc = loc;
		newEl->value->isExport = exportContext[exportContext.length()-1];

		/* It it is an instance, put on the instance list. */
		if ( isInstance )
			pd->instanceList.append( newEl );
	}
	else {
		// Recover by ignoring the duplicate.
		error(loc) << "fsm \"" << name << "\" previously defined" << endl;
	}
}

ostream &Parser::parse_error( int tokId, Token &token )
{
	/* Maintain the error count. */
	gblErrorCount += 1;

	cerr << token.loc.fileName << ":" << token.loc.line << ":" << token.loc.col << ": ";
	cerr << "at token ";
	if ( tokId < 128 )
		cerr << "\"" << Parser_lelNames[tokId] << "\"";
	else 
		cerr << Parser_lelNames[tokId];
	if ( token.data != 0 )
		cerr << " with data \"" << token.data << "\"";
	cerr << ": ";
	
	return cerr;
}

int Parser::token( InputLoc &loc, int tokId, char *tokstart, int toklen )
{
	Token token;
	token.data = tokstart;
	token.length = toklen;
	token.loc = loc;
	int res = parseLangEl( tokId, &token );
	if ( res < 0 ) {
		parse_error(tokId, token) << "parse error" << endl;
		exit(1);
	}
	return res;
}
